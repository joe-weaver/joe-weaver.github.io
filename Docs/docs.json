[{"data":[{"data":{"implements":["Updateable"],"parent":null,"functions":[{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"registerActor","header":"registerActor(actor: Actor): void","description":"Registers an actor with the AIManager","returnDescription":null,"type":"void","params":[{"name":"actor","description":"The actor to register","type":"Actor"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"registerAI","header":"registerAI(name: string, constr: new <T extends AI>() => T ): void","description":"Registers an AI with the AIManager for use later on","returnDescription":null,"type":"void","params":[{"name":"name","description":"The name of the AI to register","type":"string"},{"name":"constr","description":"The constructor for the AI","type":"new <T extends AI>() => T"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"generateAI","header":"generateAI(name: string): AI","description":"Generates an AI instance from its name","returnDescription":"A new AI instance","type":"AI","params":[{"name":"name","description":"The name of the AI to add","type":"string"}]}],"members":[{"annotation":"The array of registered actors ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"actors","type":"Array<Actor>"},{"annotation":"Maps AI names to their constructors ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"registeredAI","type":"Map<AIConstructor>"}],"name":"AIManager","description":"A manager class for all of the AI in a scene.Keeps a list of registered actors and handles AI generation for actors.","abstract":false},"name":"AIManager","type":"file"},{"data":{"implements":["AI"],"parent":"StateMachine","functions":[],"members":[{"annotation":"The GameNode that uses this StateMachine for its AI ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"owner","type":"GameNode"}],"name":"StateMachineAI","description":"A version of a @reference[StateMachine] that is configured to work as an AI controller for a @reference[GameNode]","abstract":false},"name":"StateMachineAI","type":"file"}],"name":"AI","type":"folder"},{"data":[{"data":[],"name":"Functions","type":"folder"},{"data":[{"data":{"implements":[],"parent":null,"functions":[],"members":[{"annotation":"The node in the Graph this edge connects to ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"y","type":"number"},{"annotation":"The weight of this EdgeNode ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"weight","type":"number"},{"annotation":"The next EdgeNode in the linked-list ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"next","type":"EdgeNode"}],"name":"EdgeNode","constructor":{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"constructor","header":"constructor(index: number, weight?: number)","description":"Creates a new EdgeNode","returnDescription":null,"type":"any","params":[{"name":"index","description":"The index of the node this edge connects to","type":"number"},{"name":"weight","description":"The weight of this edge","type":""}]},"description":"A linked-list for the edges in a @reference[Graph].","abstract":false},"name":"EdgeNode","type":"file"},{"data":{"implements":[],"parent":null,"functions":[{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"addNode","header":"addNode(): number","description":"Adds a node to this graph and returns the index of it","returnDescription":"The index of the new node","type":"number","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"addEdge","header":"addEdge(x: number, y: number, weight?: number): void","description":"Adds an edge between node x and y, with an optional weight","returnDescription":null,"type":"void","params":[{"name":"x","description":"The index of the start of the edge","type":"number"},{"name":"y","description":"The index of the end of the edge","type":"number"},{"name":"weight","description":"The optional weight of the new edge","type":""}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getEdges","header":"getEdges(x: number): EdgeNode","description":"Gets the edge list associated with node x","returnDescription":"The head of a linked-list of edges","type":"EdgeNode","params":[{"name":"x","description":"The index of the node","type":"number"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getDegree","header":"getDegree(x: number): number","description":"Gets the degree associated with node x","returnDescription":null,"type":"number","params":[{"name":"x","description":"The index of the node","type":"number"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"nodeToString","header":"nodeToString(index: number): string","description":"Converts the specifed node into a string","returnDescription":"The string representation of the node: \"Node x\"","type":"string","params":[{"name":"index","description":"The index of the node to convert to a string","type":"number"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"toString","header":"toString(): string","description":"Converts the Graph into a string format","returnDescription":"The graph as a string","type":"string","params":[]}],"members":[{"annotation":"An array of edges at the node specified by the index ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"edges","type":"Array<EdgeNode>"},{"annotation":"An array representing the degree of the node specified by the index ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"degree","type":"Array<number>"},{"annotation":"The number of vertices in the graph ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"numVertices","type":"number"},{"annotation":"The number of edges in the graph ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"numEdges","type":"number"},{"annotation":"Whether or not the graph is directed ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"directed","type":"boolean"},{"annotation":"Whether or not the graph is weighted ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"weighted","type":"boolean"}],"name":"Graph","constructor":{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"constructor","header":"constructor(directed: boolean = false)","description":"Constructs a new graph","returnDescription":null,"type":"any","params":[{"name":"directed","description":"Whether or not this graph is directed","type":"boolean = false"}]},"description":"An implementation of a graph data structure using edge lists. Inspired by The Algorithm Design Manual.","abstract":false},"name":"Graph","type":"file"},{"data":{"implements":["DebugRenderable"],"parent":"Graph","functions":[{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"addPositionedNode","header":"addPositionedNode(position: Vec2): number","description":"Adds a positioned node to this graph","returnDescription":"The index of the added node","type":"number","params":[{"name":"position","description":"The position of the node to add","type":"Vec2"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"setNodePosition","header":"setNodePosition(index: number, position: Vec2): void","description":"Changes the position of a node.Automatically adjusts the weights of the graph tied to this node.As such, be warned that this function has an O(n + m) running time, and use it sparingly.","returnDescription":null,"type":"void","params":[{"name":"index","description":"The index of the node","type":"number"},{"name":"position","description":"The new position of the node","type":"Vec2"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getNodePosition","header":"getNodePosition(index: number): Vec2","description":"Gets the position of a node","returnDescription":"The position of the node","type":"Vec2","params":[{"name":"index","description":"The index of the node","type":"number"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"addEdge","header":"addEdge(x: number, y: number): void","description":"Adds an edge to this graph between node x and y.Automatically calculates the weight of the edge as the distance between the nodes.","returnDescription":null,"type":"void","params":[{"name":"x","description":"The beginning of the edge","type":"number"},{"name":"y","description":"The end of the edge","type":"number"}]}],"members":[{"annotation":"An array of the positions of the nodes in this graph ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"positions","type":"Array<Vec2>"}],"name":"PositionGraph","constructor":{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"constructor","header":"constructor(directed: boolean = false)","description":"Createes a new PositionGraph","returnDescription":null,"type":"any","params":[{"name":"directed","description":"Whether or not this graph is directed","type":"boolean = false"}]},"description":"An extension of Graph that has nodes with positions in 2D space.This is a weighted graph (though not inherently directd)","abstract":false},"name":"PositionGraph","type":"file"}],"name":"Graphs","type":"folder"},{"data":[{"data":{"parent":null,"functions":[{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"addAI<T extends AI>","header":"addAI<T extends AI>(ai: string | (new () => T), options: Record<string, any>): void","description":"Adds an AI to this Actor.","returnDescription":null,"type":"void","params":[{"name":"ai","description":"The name of the AI, or the actual AI, to add to the Actor.","type":"string | (new () => T)"},{"name":"options","description":"The options to give to the AI for initialization.","type":"Record<string, any>"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"setAIActive","header":"setAIActive(active: boolean): void","description":"Sets the AI to start\/stop for this Actor.","returnDescription":null,"type":"void","params":[{"name":"active","description":"The new active status of the AI.","type":"boolean"}]}],"members":[{"annotation":"The AI of the actor ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"ai","type":"AI"},{"annotation":"The activity status of the actor ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"aiActive","type":"boolean"},{"annotation":"The id of the actor according to the @reference[AIManager] ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"actorId","type":"number"},{"annotation":"The path that navigation will follow ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"path","type":"NavigationPath"},{"annotation":"A flag representing whether or not the actor is currently pathfinding ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"pathfinding","type":"boolean"}],"name":"Actor","description":"A game object that has an AI and can perform its own actions every update cycle","isInterface":true},"name":"Actor","type":"file"},{"data":{"parent":"Updateable","functions":[{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"initializeAI","header":"initializeAI(owner: GameNode, options: Record<string, any>): void","description":"Initializes the AI with the actor and any additional config ","returnDescription":null,"type":"void","params":[]}],"members":[],"name":"AI","description":"Defines a controller for a bot or a human. Must be able to update","isInterface":true},"name":"AI","type":"file"},{"data":{"parent":null,"functions":[{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"debugRender","header":"debugRender(): void","description":"Renders the debugging information for this object. ","returnDescription":null,"type":"void","params":[]}],"members":[],"name":"DebugRenderable","description":"Represents a game object that can be rendered in Debug mode","isInterface":true},"name":"DebugRenderable","type":"file"},{"data":{"parent":null,"functions":[{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getNavigationPath","header":"getNavigationPath(fromPosition: Vec2, toPosition: Vec2): NavigationPath","description":"Gets a new navigation path based on this Navigable object.","returnDescription":null,"type":"NavigationPath","params":[{"name":"fromPosition","description":"The position to start navigation from.","type":"Vec2"},{"name":"toPosition","description":"The position to navigate to.","type":"Vec2"}]}],"members":[],"name":"Navigable","description":"Represents an entity that can be navigated on. ","isInterface":true},"name":"Navigable","type":"file"},{"data":{"parent":null,"functions":[{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"move","header":"move(velocity: Vec2): void","description":"Tells the physics engine to handle a move by this object.","returnDescription":null,"type":"void","params":[{"name":"velocity","description":"The velocity with which to move the object.","type":"Vec2"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"finishMove","header":"finishMove(): void","description":"The move actually done by the physics engine after collision checks are done.","returnDescription":null,"type":"void","params":[{"name":"velocity","description":"The velocity with which the object will move.","type":""}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"addPhysics","header":"addPhysics(collisionShape?: Shape, colliderOffset?: Vec2, isCollidable?: boolean, isStatic?: boolean): void","description":"Adds physics to this object","returnDescription":null,"type":"void","params":[{"name":"collisionShape","description":"The shape of this collider for this object","type":""},{"name":"isCollidable","description":"Whether this object will be able to collide with other objects","type":""},{"name":"isStatic","description":"Whether this object will be static or not","type":""}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"addTrigger","header":"addTrigger(group: string, eventType: string): void","description":"Adds a trigger to this object for a specific group","returnDescription":null,"type":"void","params":[{"name":"group","description":"The name of the group that activates the trigger","type":"string"},{"name":"eventType","description":"The name of the event to send when this trigger is activated","type":"string"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"setPhysicsLayer","header":"setPhysicsLayer(layer: string): void","description":"Sets the physics layer of this node","returnDescription":null,"type":"void","params":[{"name":"layer","description":"The name of the layer","type":"string"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getLastVelocity","header":"getLastVelocity(): Vec2","description":"If used before \"move()\", it will tell you the velocity of the node after its last movement","returnDescription":null,"type":"Vec2","params":[]}],"members":[{"annotation":"A flag for whether or not this object has initialized game physics. ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"hasPhysics","type":"boolean"},{"annotation":"Represents whether the object is moving or not. ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"moving","type":"boolean"},{"annotation":"Represents whether the object is on the ground or not. ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"onGround","type":"boolean"},{"annotation":"Reprsents whether the object is on the wall or not. ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"onWall","type":"boolean"},{"annotation":"Reprsents whether the object is on the ceiling or not. ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"onCeiling","type":"boolean"},{"annotation":"Represnts whether this object has active physics or not. ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"active","type":"boolean"},{"annotation":"The shape of the collider for this physics object. ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"collisionShape","type":"Shape"},{"annotation":"The offset of the collision shape from the center of the node ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"colliderOffset","type":"Vec2"},{"annotation":"Represents whether this object can move or not. ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"isStatic","type":"boolean"},{"annotation":"Represents whether this object is collidable (solid) or not. ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"isCollidable","type":"boolean"},{"annotation":"Represnts whether this object is a trigger or not. ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"isTrigger","type":"boolean"},{"annotation":"The physics group of this object. Used for triggers and for selective collisions. ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"group","type":"string"},{"annotation":"Associates different groups with trigger events. ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"triggers","type":"Map<string>"},{"annotation":"A vector that allows velocity to be passed to the physics engine ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"_velocity","type":"Vec2"},{"annotation":"The rectangle swept by the movement of this object, if dynamic ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"sweptRect","type":"AABB"},{"annotation":"A boolean representing whether or not the node just collided with the tilemap ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"collidedWithTilemap","type":"boolean"},{"annotation":"The physics layer this node belongs to ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"physicsLayer","type":"number"}],"name":"Physical","description":"Describes an object that can opt into physics.","isInterface":true},"name":"Physical","type":"file"},{"data":{"parent":null,"functions":[],"members":[{"annotation":"The center of this object. ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"position","type":"Vec2"},{"annotation":"The center of this object relative to the viewport. ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":true,"isSetter":false},"name":"relativePosition","type":"Vec2"}],"name":"Positioned","description":"An object that has a position ","isInterface":true},"name":"Positioned","type":"file"},{"data":{"parent":null,"functions":[],"members":[{"annotation":"The size of this object. ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"size","type":"Vec2"},{"annotation":"The scale of this object. ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"scale","type":"Vec2"},{"annotation":"The size of the object taking into account the zoom and scale ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":true,"isSetter":false},"name":"sizeWithZoom","type":"Vec2"},{"annotation":"The bounding box of this object. ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"boundary","type":"AABB"}],"name":"Region","description":"An object that is a region, with a size, scale, and boundary. ","isInterface":true},"name":"Region","type":"file"},{"data":{"parent":null,"functions":[],"members":[{"annotation":"The unique id of this object. ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"id","type":"number"}],"name":"Unique","description":"Represents an object with a unique id","isInterface":true},"name":"Unique","type":"file"},{"data":{"parent":null,"functions":[{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"update","header":"update(deltaT: number): void","description":"Updates this object.","returnDescription":null,"type":"void","params":[{"name":"deltaT","description":"The timestep of the update.","type":"number"}]}],"members":[],"name":"Updateable","description":"Represents a game object that can be updated ","isInterface":true},"name":"Updateable","type":"file"}],"name":"Interfaces","type":"folder"},{"data":{"implements":["Collection"],"parent":null,"functions":[{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"add","header":"add(key: string, value: T): void","description":"Adds a value T stored at a key.","returnDescription":null,"type":"void","params":[{"name":"key","description":"The key of the item to be stored","type":"string"},{"name":"value","description":"The item to be stored","type":"T"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"get","header":"get(key: string): T","description":"Get the value associated with a key.","returnDescription":"The item at the key or undefined","type":"T","params":[{"name":"key","description":"The key of the item","type":"string"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"set","header":"set(key: string, value: T): void","description":"An alias of add. Sets the value stored at key to the new specified value","returnDescription":null,"type":"void","params":[{"name":"key","description":"The key of the item to be stored","type":"string"},{"name":"value","description":"The item to be stored","type":"T"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"has","header":"has(key: string): boolean","description":"Returns true if there is a value stored at the specified key, false otherwise.","returnDescription":"A boolean representing whether or not there is an item at the given key.","type":"boolean","params":[{"name":"key","description":"The key to check","type":"string"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"keys","header":"keys(): Array<string>","description":"Returns an array of all of the keys in this map.","returnDescription":"An array containing all keys in the map.","type":"Array<string>","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"delete","header":"delete(key: string): void","description":"Deletes an item associated with a key","returnDescription":null,"type":"void","params":[{"name":"key","description":"The key at which to delete an item","type":"string"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"toString","header":"toString(): string","description":"Converts this map to a string representation.","returnDescription":"The string representation of this map.","type":"string","params":[]}],"members":[],"name":"Map<T>","constructor":{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"constructor","header":"constructor()","description":"Creates a new map ","returnDescription":null,"type":"any","params":[]},"description":"Associates strings with elements of type T","abstract":false},"name":"Map","type":"file"},{"data":[{"data":{"implements":[],"parent":null,"functions":[],"members":[{"annotation":"The area of the overlap for the colliding objects ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"area","type":"number"},{"annotation":"The AABB of the other collider in this collision ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"collider","type":"AABB"}],"name":"AreaCollision","constructor":{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"constructor","header":"constructor(area: number, collider: AABB)","description":"Creates a new AreaCollision object","returnDescription":null,"type":"any","params":[{"name":"area","description":"The area of the collision","type":"number"},{"name":"collider","description":"The other collider","type":"AABB"}]},"description":"A class that contains the area of overlap of two colliding objects to allow for sorting by the physics system.","abstract":false},"name":"AreaCollision","type":"file"},{"data":{"implements":[],"parent":null,"functions":[],"members":[{"annotation":"The time of the collision. Only numbers 0 through 1 happen in this frame. ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"time","type":"number"},{"annotation":"The near times of the collision ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"nearTimes","type":"Vec2"},{"annotation":"The position of the collision ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"pos","type":"Vec2"},{"annotation":"The overlap distance of the hit ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"delta","type":"Vec2"},{"annotation":"The normal vector of the hit ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"normal","type":"Vec2"}],"name":"Hit","description":"An object representing the data collected from a physics hit between two geometric objects.Inspired by the helpful collision documentation @link(here)(https:\/\/noonat.github.io\/intersect\/).","abstract":false},"name":"Hit","type":"file"}],"name":"Physics","type":"folder"},{"data":{"implements":["Collection"],"parent":null,"functions":[{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"enqueue","header":"enqueue(item: T): void","description":"Adds an item to the back of the queue","returnDescription":null,"type":"void","params":[{"name":"item","description":"The item to add to the back of the queue","type":"T"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"dequeue","header":"dequeue(): T","description":"Retrieves an item from the front of the queue","returnDescription":"The item at the front of the queue","type":"T","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"peekNext","header":"peekNext(): T","description":"Returns the item at the front of the queue, but does not remove it","returnDescription":"The item at the front of the queue","type":"T","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"hasItems","header":"hasItems(): boolean","description":"Returns true if the queue has items in it, false otherwise","returnDescription":"A boolean representing whether or not this queue has items","type":"boolean","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getSize","header":"getSize(): number","description":"Returns the number of elements in the queue.","returnDescription":"The size of the queue","type":"number","params":[]}],"members":[{"annotation":"The maximum number of elements in the Queue ","access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":true,"isSetter":false},"name":"MAX_ELEMENTS","type":"number"},{"annotation":"The internal representation of the queue ","access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"q","type":"Array<T>"},{"annotation":"The head of the queue ","access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"head","type":"number"},{"annotation":"The tail of the queue ","access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"tail","type":"number"},{"annotation":"The current number of items in the queue ","access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"size","type":"number"}],"name":"Queue<T>","constructor":{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"constructor","header":"constructor(maxElements: number = 100)","description":"Constructs a new queue","returnDescription":null,"type":"any","params":[{"name":"maxElements","description":"The maximum size of the stack","type":"number = 100"}]},"description":"A FIFO queue with elements of type T","abstract":false},"name":"Queue","type":"file"},{"data":{"implements":["Collection"],"parent":"Region","functions":[{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"insert","header":"insert(item: T): void","description":"Inserts a new item into this quadtree. Defers to children if this quadtree is dividedor divides the quadtree if capacity is exceeded with this add.","returnDescription":null,"type":"void","params":[{"name":"item","description":"The item to add to the quadtree","type":"T"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"queryPoint","header":"queryPoint(point: Vec2): Array<T>","description":"Returns all items at this point.","returnDescription":"A list of all elements in the quadtree that contain the specified point","type":"Array<T>","params":[{"name":"point","description":"The point to query at","type":"Vec2"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"queryRegion","header":"queryRegion(boundary: AABB): Array<T>","description":"Returns all items in this region","returnDescription":"A list of all elements in the specified region","type":"Array<T>","params":[{"name":"boundary","description":"The region to check","type":"AABB"},{"name":"inclusionCheck","description":"Allows for additional inclusion checks to further refine searches","type":""}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"subdivide","header":"subdivide(): void","description":"Divides this quadtree up into 4 smaller ones - called through insert.","returnDescription":null,"type":"void","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"distributeItems","header":"distributeItems(): void","description":"Distributes the items of this quadtree into its children.","returnDescription":null,"type":"void","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"deferInsert","header":"deferInsert(item: T): void","description":"Defers this insertion to the children of this quadtree","returnDescription":null,"type":"void","params":[{"name":"item","description":"The item to insert","type":"T"}]}],"members":[{"annotation":"The center of this quadtree ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"boundary","type":"AABB"},{"annotation":"The number of elements this quadtree root can hold before splitting ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"capacity","type":"number"},{"annotation":"The maximum height of the quadtree from this root ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"maxDepth","type":"number"},{"annotation":"Represents whether the quadtree is a root or a leaf ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"divided","type":"boolean"},{"annotation":"The array of the items in this quadtree ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"items","type":"Array<T>"},{"annotation":"The top left child ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"nw","type":"QuadTree<T>"},{"annotation":"The top right child ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"ne","type":"QuadTree<T>"},{"annotation":"The bottom left child ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"sw","type":"QuadTree<T>"},{"annotation":"The bottom right child ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"se","type":"QuadTree<T>"}],"name":"QuadTree<T","description":"A quadtree data structure implemented to work with regions rather than points.Elements in this quadtree have a position and an area, and thus can span multiplequadtree branches.","abstract":false},"name":"RegionQuadTree","type":"file"},{"data":[{"data":{"implements":[],"parent":"Shape","functions":[{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"containsPoint","header":"containsPoint(point: Vec2): boolean","description":"A simple boolean check of whether this AABB contains a point","returnDescription":"A boolean representing whether this AABB contains the specified point","type":"boolean","params":[{"name":"point","description":"The point to check","type":"Vec2"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"intersectPoint","header":"intersectPoint(point: Vec2): boolean","description":"A simple boolean check of whether this AABB contains a point","returnDescription":"A boolean representing whether this AABB contains the specified point","type":"boolean","params":[{"name":"point","description":"The point to check","type":"Vec2"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"containsPointSoft","header":"containsPointSoft(point: Vec2): boolean","description":"A boolean check of whether this AABB contains a point with soft left and top boundaries.In other words, if the top left is (0, 0), the point (0, 0) is not in the AABB","returnDescription":"A boolean representing whether this AABB contains the specified point","type":"boolean","params":[{"name":"point","description":"The point to check","type":"Vec2"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"intersectSegment","header":"intersectSegment(point: Vec2, delta: Vec2, padding?: Vec2): Hit","description":"Returns the data from the intersection of this AABB with a line segment from a point in a direction","returnDescription":"The Hit object representing the intersection, or null if there was no intersection","type":"Hit","params":[{"name":"point","description":"The point that the line segment starts from","type":"Vec2"},{"name":"delta","description":"The direction and distance of the segment","type":"Vec2"},{"name":"padding","description":"Pads the AABB to make it wider for the intersection test","type":""}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"overlapsAABB","header":"overlapsAABB(other: AABB): boolean","description":"A simple boolean check of whether this AABB overlaps another","returnDescription":"True if this AABB overlaps the other, false otherwise","type":"boolean","params":[{"name":"other","description":"The other AABB to check against","type":"AABB"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"overlapArea","header":"overlapArea(other: AABB): number","description":"Calculates the area of the overlap between this AABB and another","returnDescription":"The area of the overlap between the AABBs","type":"number","params":[{"name":"other","description":"The other AABB","type":"AABB"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"sweep","header":"sweep(velocity: Vec2, fromPosition?: Vec2, halfSize?: Vec2): void","description":"Moves and resizes this rect from its current position to the position specified","returnDescription":null,"type":"void","params":[{"name":"velocity","description":"The movement of the rect from its position","type":"Vec2"},{"name":"fromPosition","description":"A position specified to be the starting point of sweeping","type":""},{"name":"halfSize","description":"The halfSize of the sweeping rect ","type":""}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"toString","header":"toString(): string","description":"Converts this AABB to a string format","returnDescription":"(center: (x, y), halfSize: (x, y))","type":"string","params":[]}],"members":[],"name":"AABB","constructor":{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"constructor","header":"constructor(center?: Vec2, halfSize?: Vec2)","description":"Creates a new AABB","returnDescription":null,"type":"any","params":[{"name":"center","description":"The center of the AABB","type":""},{"name":"halfSize","description":"The half size of the AABB - The distance from the center to an edge in x and y","type":""}]},"description":"An Axis-Aligned Bounding Box. In other words, a rectangle that is always aligned to the x-y grid.Inspired by the helpful collision documentation @link(here)(https:\/\/noonat.github.io\/intersect\/).","abstract":false},"name":"AABB","type":"file"},{"data":{"implements":[],"parent":"Shape","functions":[],"members":[],"name":"Circle","constructor":{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"constructor","header":"constructor(center: Vec2, radius: number)","description":"Creates a new Circle","returnDescription":null,"type":"any","params":[{"name":"center","description":"The center of the circle","type":"Vec2"},{"name":"radius","description":"The radius of the circle","type":"number"}]},"description":"A Circle","abstract":false},"name":"Circle","type":"file"},{"data":{"implements":[],"parent":null,"functions":[{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"abstract getBoundingRect","header":"abstract getBoundingRect(): AABB","description":"Gets a bounding rectangle for this shape. Warning - may be the same as this Shape.For instance, the bounding circle of an AABB is itself. Use clone() if you need a new shape.","returnDescription":"An AABB that bounds this shape","type":"AABB","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"abstract getBoundingCircle","header":"abstract getBoundingCircle(): Circle","description":"Gets a bounding circle for this shape. Warning - may be the same as this Shape.For instance, the bounding circle of a Circle is itself. Use clone() if you need a new shape.","returnDescription":"A Circle that bounds this shape","type":"Circle","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"abstract clone","header":"abstract clone(): Shape","description":"Returns a copy of this Shape","returnDescription":"A new copy of this shape","type":"Shape","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"abstract overlaps","header":"abstract overlaps(other: Shape): boolean","description":"Checks if this shape overlaps another","returnDescription":"a boolean that represents whether this Shape overlaps the other one","type":"boolean","params":[{"name":"other","description":"The other shape to check against","type":"Shape"}]}],"members":[],"name":"Shape","description":"An abstract Shape class that acts as an interface for better interactions with subclasses.","abstract":true},"name":"Shape","type":"file"}],"name":"Shapes","type":"folder"},{"data":{"implements":[],"parent":null,"functions":[],"members":[{"annotation":"The name of the spritesheet ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"name","type":"string"},{"annotation":"The image key of the spritesheet ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"spriteSheetImage","type":"string"},{"annotation":"The width of the sprite ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"spriteWidth","type":"number"},{"annotation":"The height of the sprite ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"spriteHeight","type":"number"},{"annotation":"The number of columns in the spritesheet ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"columns","type":"number"},{"annotation":"The number of rows in the spritesheet ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"rows","type":"number"},{"annotation":"An array of the animations associated with this spritesheet ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"animations","type":"Array<AnimationData>"}],"name":"Spritesheet","description":"A class representing data contained in a spritesheet.Spritesheets are the images associated with sprites, and contain images indexed in a grid, whichcorrespond to animations.","abstract":false},"name":"Spritesheet","type":"file"},{"data":{"implements":["Collection"],"parent":null,"functions":[{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"push","header":"push(item: T): void","description":"Adds an item to the top of the stack","returnDescription":null,"type":"void","params":[{"name":"item","description":"The new item to add to the stack","type":"T"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"pop","header":"pop(): T","description":"Removes an item from the top of the stack","returnDescription":"The item at the top of the stack","type":"T","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"peek","header":"peek(): T","description":"Returns the element currently at the top of the stack","returnDescription":"The item at the top of the stack","type":"T","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"isEmpty","header":"isEmpty(): boolean","description":"Returns true if this stack is empty","returnDescription":"A boolean that represents whether or not the stack is empty","type":"boolean","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"size","header":"size(): number","description":"Returns the number of items currently in the stack","returnDescription":"The number of items in the stack","type":"number","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"toString","header":"toString(): string","description":"Converts this stack into a string format","returnDescription":"A string representing this stack","type":"string","params":[]}],"members":[{"annotation":"The maximum number of elements in the Stack ","access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":true,"isSetter":false},"name":"MAX_ELEMENTS","type":"number"},{"annotation":"The internal representation of the stack ","access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"stack","type":"Array<T>"},{"annotation":"The head of the stack ","access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"head","type":"number"}],"name":"Stack<T>","constructor":{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"constructor","header":"constructor(maxElements: number = 100)","description":"Constructs a new stack","returnDescription":null,"type":"any","params":[{"name":"maxElements","description":"The maximum size of the stack","type":"number = 100"}]},"description":"A LIFO stack with items of type T","abstract":false},"name":"Stack","type":"file"},{"data":[{"data":{"implements":["Updateable"],"parent":null,"functions":[{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"abstract onEnter","header":"abstract onEnter(): void","description":"A method that is called when this state is entered. Use this to initialize any variables before updates occur.","returnDescription":null,"type":"void","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"abstract handleInput","header":"abstract handleInput(event: GameEvent): void","description":"A lifecycle method that handles an input event, such as taking damage.","returnDescription":null,"type":"void","params":[{"name":"event","description":"The GameEvent to process","type":"GameEvent"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"finished","header":"finished(stateName: string): void","description":"Tells the state machine that this state has ended, and makes it transition to the new state specified","returnDescription":null,"type":"void","params":[{"name":"stateName","description":"The name of the state to transition to","type":"string"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"abstract onExit","header":"abstract onExit(): void","description":"A lifecycle method is called when the state is ending.","returnDescription":null,"type":"void","params":[]}],"members":[{"annotation":"The StateMachine that uses this State ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"parent","type":"StateMachine"},{"annotation":"An event emitter ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"emitter","type":"Emitter"}],"name":"State","constructor":{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"constructor","header":"constructor(parent: StateMachine)","description":"Constructs a new State","returnDescription":null,"type":"any","params":[{"name":"parent","description":"The parent StateMachine of this state","type":"StateMachine"}]},"description":"An abstract implementation of a state for a @reference[StateMachine].This class should be extended to allow for custom state behaviors.","abstract":true},"name":"State","type":"file"},{"data":{"implements":["Updateable"],"parent":null,"functions":[{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"setActive","header":"setActive(flag: boolean): void","description":"Sets the activity state of this state machine","returnDescription":null,"type":"void","params":[{"name":"flag","description":"True if you want to set this machine running, false otherwise","type":"boolean"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"setEmitEventOnStateChange","header":"setEmitEventOnStateChange(stateChangeEventName: string): void","description":"Makes this state machine emit an event any time its state changes","returnDescription":null,"type":"void","params":[{"name":"stateChangeEventName","description":"The name of the event to emit","type":"string"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"cancelEmitEventOnStateChange","header":"cancelEmitEventOnStateChange(): void","description":"Stops this state machine from emitting events on state change.","returnDescription":null,"type":"void","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"initialize","header":"initialize(initialState: string): void","description":"Initializes this state machine with an initial state and sets it running","returnDescription":null,"type":"void","params":[{"name":"initialState","description":"The name of initial state of the state machine","type":"string"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"addState","header":"addState(stateName: string, state: State): void","description":"Adds a state to this state machine","returnDescription":null,"type":"void","params":[{"name":"stateName","description":"The name of the state to add","type":"string"},{"name":"state","description":"The state to add","type":"State"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"changeState","header":"changeState(state: string): void","description":"Changes the state of this state machine to the provided string","returnDescription":null,"type":"void","params":[{"name":"state","description":"The string name of the state to change to","type":"string"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"handleInput","header":"handleInput(event: GameEvent): void","description":"Handles input. This happens at the very beginning of this state machine's update cycle.","returnDescription":null,"type":"void","params":[{"name":"event","description":"The game event to process","type":"GameEvent"}]}],"members":[{"annotation":"A stack of the current states ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"stack","type":"Stack<State>"},{"annotation":"A mape of state keys to actual state instances ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"stateMap","type":"Map<State>"},{"annotation":"The current state ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"currentState","type":"State"},{"annotation":"An event receiver ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"receiver","type":"Receiver"},{"annotation":"An event emitter ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"emitter","type":"Emitter"},{"annotation":"A boolean representing whether or not this StateMachine is currently active ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"active","type":"boolean"},{"annotation":"A boolean representing whether or not this StateMachine should emit an event on state change ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"emitEventOnStateChange","type":"boolean"},{"annotation":"The name of the event to be emitted on state change ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"stateChangeEventName","type":"string"}],"name":"StateMachine","constructor":{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"constructor","header":"constructor()","description":"Creates a new StateMachine","returnDescription":null,"type":"any","params":[]},"description":"An implementation of a Push Down Automata State machine. States can also be hierarchicalfor more flexibility, as described in @link(Game Programming Patterns)(https:\/\/gameprogrammingpatterns.com\/state.html).","abstract":false},"name":"StateMachine","type":"file"}],"name":"State","type":"folder"},{"data":[{"data":{"implements":[],"parent":null,"functions":[{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"initFromTiledData","header":"initFromTiledData(tiledData: TiledTilesetData): void","description":"Initialize the tileset from the data from a Tiled json file","returnDescription":null,"type":"void","params":[{"name":"tiledData","description":"The parsed object from a Tiled json file","type":"TiledTilesetData"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getImageKey","header":"getImageKey(): string","description":"Gets the image key associated with this tilemap","returnDescription":"The image key of this tilemap","type":"string","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getImageOffsetForTile","header":"getImageOffsetForTile(tileIndex: number): Vec2","description":"Returns a Vec2 containing the left and top offset from the image origin for this tile.","returnDescription":"A Vec2 containing the offset for the specified tile.","type":"Vec2","params":[{"name":"tileIndex","description":"The index of the tile from startIndex to endIndex of this tileset","type":"number"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getStartIndex","header":"getStartIndex(): number","description":"Gets the start index","returnDescription":"The start index","type":"number","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getTileSize","header":"getTileSize(): Vec2","description":"Gets the tile set","returnDescription":"A Vec2 containing the tile size","type":"Vec2","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getNumRows","header":"getNumRows(): number","description":"Gets the number of rows in the tileset","returnDescription":"The number of rows","type":"number","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getNumCols","header":"getNumCols(): number","description":"Gets the number of columns in the tilset","returnDescription":"The number of columns","type":"number","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"hasTile","header":"hasTile(tileIndex: number): boolean","description":"Checks whether or not this tilset contains the specified tile index. This is used for rendering.","returnDescription":"A boolean representing whether or not this tilset uses the specified index","type":"boolean","params":[{"name":"tileIndex","description":"The index of the tile to check","type":"number"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"renderTile","header":"renderTile(ctx: CanvasRenderingContext2D, tileIndex: number, dataIndex: number, maxCols: number, origin: Vec2, scale: Vec2, zoom: number): void","description":"Render a singular tile with index tileIndex from the tileset located at position dataIndex","returnDescription":null,"type":"void","params":[{"name":"ctx","description":"The rendering context","type":"CanvasRenderingContext2D"},{"name":"tileIndex","description":"The value of the tile to render","type":"number"},{"name":"dataIndex","description":"The index of the tile in the data array","type":"number"},{"name":"worldSize","description":"The size of the world","type":""},{"name":"origin","description":"The viewport origin in the current layer","type":"Vec2"},{"name":"scale","description":"The scale of the tilemap","type":"Vec2"}]}],"members":[{"annotation":"The key of the image used by this tileset ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"imageKey","type":"string"},{"annotation":"The size of the tileset image ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"imageSize","type":"Vec2"},{"annotation":"The index of 0th image of this tileset ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"startIndex","type":"number"},{"annotation":"The index of the last image of this tilset ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"endIndex","type":"number"},{"annotation":"The size of the tiles in this tileset ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"tileSize","type":"Vec2"},{"annotation":"The number of rows in this tileset ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"numRows","type":"number"},{"annotation":"The number of columns in this tileset ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"numCols","type":"number"}],"name":"Tileset","description":"The data representation of a Tileset for the game engine. This represents one image,with a startIndex if required (as it is with Tiled using two images in one tilset).","abstract":false},"name":"Tileset","type":"file"}],"name":"Tilesets","type":"folder"},{"data":{"implements":[],"parent":null,"functions":[{"access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"onChange: Function =","header":"onChange: Function = () =>","description":"When this vector changes its value, do something","returnDescription":null,"type":"any","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"magSq","header":"magSq(): number","description":"The squared magnitude of the vector. This tends to be faster, so use it in situations where taking thesquare root doesn't matter, like for comparing distances.","returnDescription":"The squared magnitude of the vector","type":"number","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"mag","header":"mag(): number","description":"The magnitude of the vector.","returnDescription":"The magnitude of the vector.","type":"number","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"normalize","header":"normalize(): Vec2","description":"Divdes x and y by the magnitude to obtain the unit vector in the direction of this vector.","returnDescription":"This vector as a unit vector.","type":"Vec2","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"normalized","header":"normalized(): Vec2","description":"Works like normalize(), but returns a new Vec2","returnDescription":"A new vector that is the unit vector for this one","type":"Vec2","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"zero","header":"zero(): Vec2","description":"Sets the x and y elements of this vector to zero.","returnDescription":"This vector, with x and y set to zero.","type":"Vec2","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"setToAngle","header":"setToAngle(angle: number, radius: number = 1): Vec2","description":"Sets the vector's x and y based on the angle provided. Goes counter clockwise.","returnDescription":"This vector.","type":"Vec2","params":[{"name":"angle","description":"The angle in radians","type":"number"},{"name":"radius","description":"The magnitude of the vector at the specified angle","type":"number = 1"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"vecTo","header":"vecTo(other: Vec2): Vec2","description":"Returns a vector that point from this vector to another one","returnDescription":"A new Vec2 that points from this vector to the one provided","type":"Vec2","params":[{"name":"other","description":"The vector to point to","type":"Vec2"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"dirTo","header":"dirTo(other: Vec2): Vec2","description":"Returns a vector containing the direction from this vector to another","returnDescription":"A new Vec2 that points from this vector to the one provided. This new Vec2 will be a unit vector.","type":"Vec2","params":[{"name":"other","description":"The vector to point to","type":"Vec2"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"scaleTo","header":"scaleTo(magnitude: number): Vec2","description":"Keeps the vector's direction, but sets its magnitude to be the provided magnitude","returnDescription":"This vector with its magnitude set to the new magnitude","type":"Vec2","params":[{"name":"magnitude","description":"The magnitude the vector should be","type":"number"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"scale","header":"scale(factor: number, yFactor: number = null): Vec2","description":"Scales x and y by the number provided, or if two number are provided, scales them individually.","returnDescription":"This vector after scaling","type":"Vec2","params":[{"name":"factor","description":"The scaling factor for the vector, or for only the x-component if yFactor is provided","type":"number"},{"name":"yFactor","description":"The scaling factor for the y-component of the vector","type":"number = null"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"scaled","header":"scaled(factor: number, yFactor: number = null): Vec2","description":"Returns a scaled version of this vector without modifying it.","returnDescription":"A new vector that has the values of this vector after scaling","type":"Vec2","params":[{"name":"factor","description":"The scaling factor for the vector, or for only the x-component if yFactor is provided","type":"number"},{"name":"yFactor","description":"The scaling factor for the y-component of the vector","type":"number = null"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"rotateCCW","header":"rotateCCW(angle: number): Vec2","description":"Rotates the vector counter-clockwise by the angle amount specified","returnDescription":"This vector after rotation.","type":"Vec2","params":[{"name":"angle","description":"The angle to rotate by in radians","type":"number"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"set","header":"set(x: number, y: number): Vec2","description":"Sets the vectors coordinates to be the ones provided","returnDescription":"This vector","type":"Vec2","params":[{"name":"x","description":"The new x value for this vector","type":"number"},{"name":"y","description":"The new y value for this vector","type":"number"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"copy","header":"copy(other: Vec2): Vec2","description":"Copies the values of the other Vec2 into this one.","returnDescription":"This vector with its values set to the vector provided","type":"Vec2","params":[{"name":"other","description":"The Vec2 to copy","type":"Vec2"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"add","header":"add(other: Vec2): Vec2","description":"Adds this vector the another vector","returnDescription":"This vector after adding the one provided","type":"Vec2","params":[{"name":"other","description":"The Vec2 to add to this one","type":"Vec2"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"sub","header":"sub(other: Vec2): Vec2","description":"Subtracts another vector from this vector","returnDescription":"This vector after subtracting the one provided","type":"Vec2","params":[{"name":"other","description":"The Vec2 to subtract from this one","type":"Vec2"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"mult","header":"mult(other: Vec2): Vec2","description":"Multiplies this vector with another vector element-wise. In other words, this.x *= other.x and this.y *= other.y","returnDescription":"This vector after multiplying its components by this one","type":"Vec2","params":[{"name":"other","description":"The Vec2 to multiply this one by","type":"Vec2"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"div","header":"div(other: Vec2): Vec2","description":"Divides this vector with another vector element-wise. In other words, this.x \/= other.x and this.y \/= other.y","returnDescription":"This vector after division","type":"Vec2","params":[{"name":"other","description":"The vector to divide this one by","type":"Vec2"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"distanceSqTo","header":"distanceSqTo(other: Vec2): number","description":"Returns the squared distance between this vector and another vector","returnDescription":"The squared distance between this vector and the one provided","type":"number","params":[{"name":"other","description":"The vector to compute distance squared to","type":"Vec2"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"distanceTo","header":"distanceTo(other: Vec2): number","description":"Returns the distance between this vector and another vector","returnDescription":"The distance between this vector and the one provided","type":"number","params":[{"name":"other","description":"The vector to compute distance to","type":"Vec2"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"dot","header":"dot(other: Vec2): number","description":"Returns the dot product of this vector and another","returnDescription":"The dot product of this vector and the one provided.","type":"number","params":[{"name":"other","description":"The vector to compute the dot product with","type":"Vec2"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"angleToCCW","header":"angleToCCW(other: Vec2): number","description":"Returns the angle counter-clockwise in radians from this vector to another vector","returnDescription":"The angle, rotating CCW, from this vector to the other vector","type":"number","params":[{"name":"other","description":"The vector to compute the angle to","type":"Vec2"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"toString","header":"toString(): string","description":"Returns a string representation of this vector rounded to 1 decimal point","returnDescription":"This vector as a string","type":"string","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"toFixed","header":"toFixed(numDecimalPoints: number = 1): string","description":"Returns a string representation of this vector rounded to the specified number of decimal points","returnDescription":"This vector as a string","type":"string","params":[{"name":"numDecimalPoints","description":"The number of decimal points to create a string to","type":"number = 1"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"clone","header":"clone(): Vec2","description":"Returns a new vector with the same coordinates as this one.","returnDescription":"A new Vec2 with the same values as this one","type":"Vec2","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"strictEquals","header":"strictEquals(other: Vec2): boolean","description":"Returns true if this vector and other have the EXACT same x and y (not assured to be safe for floats)","returnDescription":"A boolean representing the equality of the two vectors","type":"boolean","params":[{"name":"other","description":"The vector to check against","type":"Vec2"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"equals","header":"equals(other: Vec2): boolean","description":"Returns true if this vector and other have the same x and y","returnDescription":"A boolean representing the equality of the two vectors","type":"boolean","params":[{"name":"other","description":"The vector to check against","type":"Vec2"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"strictIsZero","header":"strictIsZero(): boolean","description":"Returns true if this vector is the zero vector exactly (not assured to be safe for floats).","returnDescription":"A boolean representing the equality of this vector and the zero vector","type":"boolean","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"isZero","header":"isZero(): boolean","description":"Returns true if this x and y for this vector are both zero.","returnDescription":"A boolean representing the equality of this vector and the zero vector","type":"boolean","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"setOnChange","header":"setOnChange(f: Function): void","description":"Sets the function that is called whenever this vector is changed.","returnDescription":null,"type":"void","params":[{"name":"f","description":"The function to be called","type":"Function"}]},{"access":{"isGetter":false,"isStatic":true,"accessLevel":"public","readonly":false,"isSetter":false},"name":"lerp","header":"lerp(a: Vec2, b: Vec2, t: number): Vec2","description":"Performs linear interpolation between two vectors","returnDescription":"A new Vec2 representing the lerp between vector a and b.","type":"Vec2","params":[{"name":"a","description":"The first vector","type":"Vec2"},{"name":"b","description":"The second vector","type":"Vec2"},{"name":"t","description":"The time of the lerp, with 0 being vector A, and 1 being vector B","type":"number"}]}],"members":[{"annotation":"The array that stores the actual vector values x and y ","access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"vec","type":"Float32Array"}],"name":"Vec2","constructor":{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"constructor","header":"constructor(x: number = 0, y: number = 0)","description":"Creates a new Vec2","returnDescription":null,"type":"any","params":[{"name":"x","description":"The x value of the vector","type":"number = 0"},{"name":"y","description":"The y value of the vector","type":"number = 0"}]},"description":"A two-dimensional vector (x, y)","abstract":false},"name":"Vec2","type":"file"}],"name":"DataTypes","type":"folder"},{"data":[{"data":{"implements":[],"parent":null,"functions":[{"access":{"isGetter":false,"isStatic":true,"accessLevel":"public","readonly":false,"isSetter":false},"name":"log","header":"log(id: string, ...messages: any): void","description":"Add a message to display on the debug screen","returnDescription":null,"type":"void","params":[{"name":"id","description":"A unique ID for this message","type":"string"},{"name":"messages","description":"The messages to print to the debug screen","type":""}]},{"access":{"isGetter":false,"isStatic":true,"accessLevel":"public","readonly":false,"isSetter":false},"name":"clearLogItem","header":"clearLogItem(id: string): void","description":"Deletes a a key from the log and stops it from keeping up space on the screen","returnDescription":null,"type":"void","params":[{"name":"id","description":"The id of the log item to clear","type":"string"}]},{"access":{"isGetter":false,"isStatic":true,"accessLevel":"public","readonly":false,"isSetter":false},"name":"setNodes","header":"setNodes(nodes: Array<GameNode>): void","description":"Sets the list of nodes to render with the debugger","returnDescription":null,"type":"void","params":[{"name":"nodes","description":"The new list of nodes","type":"Array<GameNode>"}]},{"access":{"isGetter":false,"isStatic":true,"accessLevel":"public","readonly":false,"isSetter":false},"name":"drawBox","header":"drawBox(center: Vec2, halfSize: Vec2, filled: boolean, color: Color): void","description":"Draws a box at the specified position","returnDescription":null,"type":"void","params":[{"name":"center","description":"The center of the box","type":"Vec2"},{"name":"halfSize","description":"The dimensions of the box","type":"Vec2"},{"name":"filled","description":"A boolean for whether or not the box is filled","type":"boolean"},{"name":"color","description":"The color of the box to draw","type":"Color"}]},{"access":{"isGetter":false,"isStatic":true,"accessLevel":"public","readonly":false,"isSetter":false},"name":"drawRay","header":"drawRay(from: Vec2, to: Vec2, color: Color): void","description":"Draws a ray at the specified position","returnDescription":null,"type":"void","params":[{"name":"from","description":"The starting position of the ray","type":"Vec2"},{"name":"to","description":"The ending position of the ray","type":"Vec2"},{"name":"color","description":"The color of the ray","type":"Color"}]},{"access":{"isGetter":false,"isStatic":true,"accessLevel":"public","readonly":false,"isSetter":false},"name":"drawPoint","header":"drawPoint(pos: Vec2, color: Color): void","description":"Draws a point at the specified position","returnDescription":null,"type":"void","params":[{"name":"pos","description":"The position of the point","type":"Vec2"},{"name":"color","description":"The color of the point","type":"Color"}]},{"access":{"isGetter":false,"isStatic":true,"accessLevel":"public","readonly":false,"isSetter":false},"name":"setDefaultTextColor","header":"setDefaultTextColor(color: Color): void","description":"Sets the default rendering color for text for the debugger","returnDescription":null,"type":"void","params":[{"name":"color","description":"The color to render the text","type":"Color"}]},{"access":{"isGetter":false,"isStatic":true,"accessLevel":"public","readonly":false,"isSetter":false},"name":"initializeDebugCanvas","header":"initializeDebugCanvas(canvas: HTMLCanvasElement, width: number, height: number): CanvasRenderingContext2D","description":"Performs any necessary setup operations on the Debug canvas","returnDescription":"The rendering context extracted from the canvas","type":"CanvasRenderingContext2D","params":[{"name":"canvas","description":"The debug canvas","type":"HTMLCanvasElement"},{"name":"width","description":"The desired width of the canvas","type":"number"},{"name":"height","description":"The desired height of the canvas","type":"number"}]},{"access":{"isGetter":false,"isStatic":true,"accessLevel":"public","readonly":false,"isSetter":false},"name":"clearCanvas","header":"clearCanvas(): void","description":"Clears the debug canvas ","returnDescription":null,"type":"void","params":[]},{"access":{"isGetter":false,"isStatic":true,"accessLevel":"public","readonly":false,"isSetter":false},"name":"render","header":"render(): void","description":"Renders the text and nodes sent to the Debug system ","returnDescription":null,"type":"void","params":[]},{"access":{"isGetter":false,"isStatic":true,"accessLevel":"public","readonly":false,"isSetter":false},"name":"renderText","header":"renderText(): void","description":"Renders the text sent to the Debug canvas ","returnDescription":null,"type":"void","params":[]},{"access":{"isGetter":false,"isStatic":true,"accessLevel":"public","readonly":false,"isSetter":false},"name":"renderNodes","header":"renderNodes(): void","description":"Renders the nodes registered with the debug canvas ","returnDescription":null,"type":"void","params":[]}],"members":[{"annotation":"A map of log messages to display on the screen ","access":{"isGetter":false,"isStatic":true,"accessLevel":"private","readonly":false,"isSetter":false},"name":"logMessages","type":"Map<string>"},{"annotation":"An array of game nodes to render debug info for ","access":{"isGetter":false,"isStatic":true,"accessLevel":"private","readonly":false,"isSetter":false},"name":"nodes","type":"Array<GameNode>"},{"annotation":"The rendering context for any debug messages ","access":{"isGetter":false,"isStatic":true,"accessLevel":"private","readonly":false,"isSetter":false},"name":"debugRenderingContext","type":"CanvasRenderingContext2D"},{"annotation":"The size of the debug canvas ","access":{"isGetter":false,"isStatic":true,"accessLevel":"private","readonly":false,"isSetter":false},"name":"debugCanvasSize","type":"Vec2"},{"annotation":"The rendering color for text ","access":{"isGetter":false,"isStatic":true,"accessLevel":"private","readonly":false,"isSetter":false},"name":"defaultTextColor","type":"Color"}],"name":"Debug","description":"A util class for rendering Debug messages to the canvas.","abstract":false},"name":"Debug","type":"file"}],"name":"Debug","type":"folder"},{"data":[{"data":{"implements":[],"parent":null,"functions":[{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"fireEvent","header":"fireEvent(eventType: string, data: Map<any> | Record<string, any> = null): void","description":"Emit and event of type eventType with the data packet data","returnDescription":null,"type":"void","params":[{"name":"eventType","description":"The name of the event to fire off","type":"string"},{"name":"data","description":"A @reference[Map] or record containing any data about the event","type":"Map<any> | Record<string, any> = null"}]}],"members":[{"annotation":"A reference to the EventQueue ","access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"eventQueue","type":"EventQueue"}],"name":"Emitter","constructor":{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"constructor","header":"constructor()","description":"Creates a new Emitter ","returnDescription":null,"type":"any","params":[]},"description":"An event emitter object other systems can use to hook into the EventQueue.Provides an easy interface for firing off events.","abstract":false},"name":"Emitter","type":"file"},{"data":{"implements":[],"parent":null,"functions":[{"access":{"isGetter":false,"isStatic":true,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getInstance","header":"getInstance(): EventQueue","description":"Retrieves the instance of the Singleton EventQueue ","returnDescription":null,"type":"EventQueue","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"addEvent","header":"addEvent(event: GameEvent): void","description":"Adds an event to the EventQueue.* This is exposed to the rest of the game engine through the @reference[Emitter] class ","returnDescription":null,"type":"void","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"subscribe","header":"subscribe(receiver: Receiver, type: string | Array<string>): void","description":"Associates a receiver with a type of event. Every time this event appears in the future,it will be given to the receiver (and any others watching that type).This is exposed to the rest of the game engine through the @reference[Receiver] class","returnDescription":null,"type":"void","params":[{"name":"receiver","description":"The event receiver","type":"Receiver"},{"name":"type","description":"The type or types of events to subscribe to","type":"string | Array<string>"}]}],"members":[{"annotation":"The maximum number of events visible ","access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":true,"isSetter":false},"name":"MAX_SIZE","type":"number"},{"annotation":"The actual queue of events ","access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"q","type":"Queue<GameEvent>"},{"annotation":"The map of receivers registered for an event name ","access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"receivers","type":"Map<Array<Receiver>>"}],"name":"EventQueue","description":"The main event system of the game engine.Events are sent to the EventQueue, which handles distribution to any systems that are listening for those events.This allows for handling of input without having classes directly hook into javascript event handles,and allows otherwise separate classes to communicate with each other cleanly, such as a Player objectrequesting a sound be played by the audio system.The distribution of @reference[GameEvent]s happens as follows:Events are recieved throughout a frame and are queued up by the EventQueue.At the beginning of the next frame, events are sent out to any receivers that are hooked into the event type.@reference[Receiver]s are then free to process events as they see fit.Overall, the EventQueue can be considered as something similar to an email server,and the @reference[Receiver]s can be considered as the client inboxes.See @link(Game Programming Patterns)(https:\/\/gameprogrammingpatterns.com\/event-queue.html) for more discussion on EventQueues","abstract":false},"name":"EventQueue","type":"file"},{"data":{"implements":[],"parent":null,"functions":[{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"isType","header":"isType(type: string): boolean","description":"Checks the type of the GameEvent","returnDescription":"True if the GameEvent is the specified type, false otherwise.","type":"boolean","params":[{"name":"type","description":"The type to check","type":"string"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"toString","header":"toString(): string","description":"Returns this GameEvent as a string","returnDescription":"The string representation of the GameEvent","type":"string","params":[]}],"members":[{"annotation":"The type of the event ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"type","type":"string"},{"annotation":"The data contained by the event ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"data","type":"Map<any>"},{"annotation":"The time of the event in ms ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"time","type":"number"}],"name":"GameEvent","constructor":{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"constructor","header":"constructor(type: string, data: Map<any> | Record<string, any> = null)","description":"Creates a new GameEvent.This is handled implicitly through the @reference[Emitter] class","returnDescription":null,"type":"any","params":[{"name":"type","description":"The type of the GameEvent","type":"string"},{"name":"data","description":"The data contained by the GameEvent","type":"Map<any> | Record<string, any> = null"}]},"description":"A representation of an in-game event that is passed through the @reference[EventQueue]","abstract":false},"name":"GameEvent","type":"file"},{"data":{"implements":[],"parent":null,"functions":[{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"subscribe","header":"subscribe(eventTypes: string | Array<string>): void","description":"Adds these types of events to this receiver's queue every update.","returnDescription":null,"type":"void","params":[{"name":"eventTypes","description":"The types of events this receiver will be subscribed to","type":"string | Array<string>"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"receive","header":"receive(event: GameEvent): void","description":"Adds an event to the queue of this reciever. This is used by the @reference[EventQueue] to distribute events","returnDescription":null,"type":"void","params":[{"name":"event","description":"The event to receive","type":"GameEvent"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getNextEvent","header":"getNextEvent(): GameEvent","description":"Retrieves the next event from the receiver's queue","returnDescription":"The next GameEvent","type":"GameEvent","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"peekNextEvent","header":"peekNextEvent(): GameEvent","description":"Looks at the next event in the receiver's queue, but doesn't remove it from the queue","returnDescription":"The next GameEvent","type":"GameEvent","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"hasNextEvent","header":"hasNextEvent(): boolean","description":"Returns true if the receiver has any events in its queue","returnDescription":"True if the receiver has another event, false otherwise","type":"boolean","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"ignoreEvents","header":"ignoreEvents(): void","description":"Ignore all events this frame","returnDescription":null,"type":"void","params":[]}],"members":[{"annotation":"The maximum number of events this Receiver can hold at one time ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":true,"isSetter":false},"name":"MAX_SIZE","type":"number"},{"annotation":"The inbox of the Receiver ","access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"q","type":"Queue<GameEvent>"}],"name":"Receiver","constructor":{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"constructor","header":"constructor()","description":"Creates a new Receiver ","returnDescription":null,"type":"any","params":[]},"description":"Receives subscribed events from the EventQueue.","abstract":false},"name":"Receiver","type":"file"}],"name":"Events","type":"folder"},{"data":[{"data":{"implements":[],"parent":null,"functions":[],"members":[],"name":"InputHandler","constructor":{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"constructor","header":"constructor(canvas: HTMLCanvasElement)","description":"Creates a new InputHandler","returnDescription":null,"type":"any","params":[{"name":"canvas","description":"The game canvas","type":"HTMLCanvasElement"}]},"description":"Handles communication with the web browser to receive asynchronous events and send them to the @reference[EventQueue]","abstract":false},"name":"InputHandler","type":"file"},{"data":{"implements":[],"parent":null,"functions":[{"access":{"isGetter":false,"isStatic":true,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getInstance","header":"getInstance(): InputReceiver","description":"Gets the statc instance of the Singleton InputReceiver","returnDescription":"The InputReceiver instance","type":"InputReceiver","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"isJustPressed","header":"isJustPressed(key: string): boolean","description":"Returns whether or not a key was newly pressed this frame.If the key is still pressed from last frame and wasn't re-pressed, this will return false.","returnDescription":"True if the key was just pressed, false otherwise","type":"boolean","params":[{"name":"key","description":"The key","type":"string"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getKeysJustPressed","header":"getKeysJustPressed(): Array<string>","description":"Returns an array of all of the keys that are newly pressed this frame.If a key is still pressed from last frame and wasn't re-pressed, it will not be in this list.","returnDescription":"An array of all of the newly pressed keys.","type":"Array<string>","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"isPressed","header":"isPressed(key: string): boolean","description":"Returns whether or not a key is being pressed.","returnDescription":"True if the key is currently pressed, false otherwise","type":"boolean","params":[{"name":"key","description":"The key","type":"string"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"isMouseJustPressed","header":"isMouseJustPressed(): boolean","description":"Returns whether or not the mouse was newly pressed this frame","returnDescription":"True if the mouse was just pressed, false otherwise","type":"boolean","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"isMousePressed","header":"isMousePressed(): boolean","description":"Returns whether or not the mouse is currently pressed","returnDescription":"True if the mouse is currently pressed, false otherwise","type":"boolean","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"didJustScroll","header":"didJustScroll(): boolean","description":"Returns whether the user scrolled or not","returnDescription":"True if the user just scrolled this frame, false otherwise","type":"boolean","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getScrollDirection","header":"getScrollDirection(): number","description":"Gets the direction of the scroll","returnDescription":"-1 if the user scrolled up, 1 if they scrolled down","type":"number","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getMousePosition","header":"getMousePosition(): Vec2","description":"Gets the position of the player's mouse","returnDescription":"The mouse position stored as a Vec2","type":"Vec2","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getGlobalMousePosition","header":"getGlobalMousePosition(): Vec2","description":"Gets the position of the player's mouse in the game world,taking into consideration the scrolling of the viewport","returnDescription":"The mouse position stored as a Vec2","type":"Vec2","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getMousePressPosition","header":"getMousePressPosition(): Vec2","description":"Gets the position of the last mouse press","returnDescription":"The mouse position stored as a Vec2","type":"Vec2","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getGlobalMousePressPosition","header":"getGlobalMousePressPosition(): Vec2","description":"Gets the position of the last mouse press in the game world,taking into consideration the scrolling of the viewport","returnDescription":"The mouse position stored as a Vec2","type":"Vec2","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"setViewport","header":"setViewport(viewport: Viewport): void","description":"Gives the input receiver a reference to the viewport","returnDescription":null,"type":"void","params":[{"name":"viewport","description":"The viewport","type":"Viewport"}]}],"members":[],"name":"InputReceiver","description":"Receives input events from the @reference[EventQueue] and allows for easy access of information about input by other systems","abstract":false},"name":"InputReceiver","type":"file"}],"name":"Input","type":"folder"},{"data":[{"data":{"implements":[],"parent":"GameLoop","functions":[{"access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"updateFPS","header":"updateFPS(timestamp: number): void","description":"Updates the frame count and sum of time for the framerate of the game","returnDescription":null,"type":"void","params":[{"name":"timestep","description":"The current time in ms","type":""}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"setMaxUpdateFPS","header":"setMaxUpdateFPS(initMax: number): void","description":"Changes the maximum allowed physics framerate of the game","returnDescription":null,"type":"void","params":[{"name":"initMax","description":"The max framerate","type":"number"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"setMaxFPS","header":"setMaxFPS(maxFPS: number): void","description":"Sets the maximum rendering framerate","returnDescription":null,"type":"void","params":[{"name":"maxFPS","description":"The max framerate","type":"number"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"resetFrameDelta","header":"resetFrameDelta() : number","description":"This function is called when the game loop panics, i.e. it tries to process too much time in an entire frame.This will reset the amount of time back to zero.","returnDescription":"The amount of time we are discarding from processing.","type":"number","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"start","header":"start(): void","description":"Starts up the game loop and calls the first requestAnimationFrame","returnDescription":null,"type":"void","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"doFirstFrame","header":"doFirstFrame(timestamp: number): void","description":"The first game frame - initializes the first frame time and begins the render","returnDescription":null,"type":"void","params":[{"name":"timestamp","description":"The current time in ms","type":"number"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"startFrame","header":"startFrame(timestamp: number): void","description":"Handles any processing that needs to be done at the start of the frame","returnDescription":null,"type":"void","params":[{"name":"timestamp","description":"The time of the frame in ms","type":"number"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"doFrame =","header":"doFrame = (timestamp: number): void =>","description":"The main loop of the game. Updates until the current time is reached. Renders once","returnDescription":null,"type":"void =>","params":[{"name":"timestamp","description":"The current time in ms","type":"number"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"finishFrame","header":"finishFrame(panic: boolean): void","description":"Wraps up the frame and handles the panic state if there is one","returnDescription":null,"type":"void","params":[{"name":"panic","description":"Whether or not the loop panicked","type":"boolean"}]}],"members":[{"annotation":"The max allowed update fps.","access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"maxUpdateFPS","type":"number"},{"annotation":"The timestep for each update. This is the deltaT passed to update calls. ","access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"updateTimestep","type":"number"},{"annotation":"The amount of time we are yet to simulate. ","access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"frameDelta","type":"number"},{"annotation":"The time when the last frame was drawn. ","access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"lastFrameTime","type":"number"},{"annotation":"The minimum time we want to wait between game frames. ","access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"minFrameDelay","type":"number"},{"annotation":"The current frame of the game. ","access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"frame","type":"number"},{"annotation":"The actual fps of the game. ","access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"fps","type":"number"},{"annotation":"The time between fps measurement updates. ","access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"fpsUpdateInterval","type":"number"},{"annotation":"The time of the last fps update. ","access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"lastFpsUpdate","type":"number"},{"annotation":"The number of frames since the last fps update was done. ","access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"framesSinceLastFpsUpdate","type":"number"},{"annotation":"The status of whether or not the game loop has started. ","access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"started","type":"boolean"},{"annotation":"The status of whether or not the game loop is currently running. ","access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"running","type":"boolean"},{"annotation":"The number of update steps this iteration of the game loop. ","access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"numUpdateSteps","type":"number"}],"name":"FixedUpdateGameLoop","description":"A game loop with a fixed update time and a variable render time.Every frame, the game updates until all time since the last frame has been processed.If too much time has passed, such as if the last update was too slow,or if the browser was put into the background, the loop will panic and discard time.A render happens at the end of every frame. This happens as fast as possible unless specified.A loop of this type allows for deterministic behavior - No matter what the frame rate is, the update should behave the same,as it is occuring in a fixed interval.","abstract":false},"name":"FixedUpdateGameLoop","type":"file"},{"data":{"implements":[],"parent":null,"functions":[{"access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"initializeGameWindow","header":"initializeGameWindow(): void","description":"Set up the game window that holds the canvases","returnDescription":null,"type":"void","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getSceneManager","header":"getSceneManager(): SceneManager","description":"Retreives the SceneManager from the Game","returnDescription":"The SceneManager","type":"SceneManager","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"start","header":"start(): void","description":"Starts the game","returnDescription":null,"type":"void","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"update","header":"update(deltaT: number): void","description":"Updates all necessary subsystems of the game. Defers scene updates to the sceneManager","returnDescription":null,"type":"void","params":[{"name":"deltaT","description":"The time sine the last update","type":"number"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"render","header":"render(): void","description":"Clears the canvas and defers scene rendering to the sceneManager. Renders the debug canvas","returnDescription":null,"type":"void","params":[]}],"members":[],"name":"Game","constructor":{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"constructor","header":"constructor(options?: Record<string, any>)","description":"Creates a new Game","returnDescription":null,"type":"any","params":[{"name":"options","description":"The options for Game initialization","type":""}]},"description":"The main loop of the game engine.Handles the update order, and initializes all subsystems.The Game manages the update cycle, and requests animation frames to render to the browser.","abstract":false},"name":"Game","type":"file"},{"data":{"implements":[],"parent":null,"functions":[{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"abstract getFPS","header":"abstract getFPS(): number","description":"Retrieves the current FPS of the game","returnDescription":null,"type":"number","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"abstract start","header":"abstract start(): void","description":"Starts up the game loop","returnDescription":null,"type":"void","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"abstract doFirstFrame","header":"abstract doFirstFrame(timestamp: number): void","description":"Runs the first frame of the game. No update occurs here, only a render.This is needed to initialize delta time values","returnDescription":null,"type":"void","params":[{"name":"timestamp","description":"The timestamp of the frame. This is received from the browser","type":"number"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"abstract startFrame","header":"abstract startFrame(timestamp: number): void","description":"Run before any updates or the render of a frame.","returnDescription":null,"type":"void","params":[{"name":"timestamp","description":"The timestamp of the frame. This is received from the browser","type":"number"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"abstract doFrame","header":"abstract doFrame(timestamp: number): void","description":"The core of the frame, where any necessary updates occur, and where a render happens","returnDescription":null,"type":"void","params":[{"name":"timestamp","description":"The timestamp of the frame. This is received from the browser","type":"number"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"abstract finishFrame","header":"abstract finishFrame(panic: boolean): void","description":"Wraps up the frame","returnDescription":null,"type":"void","params":[{"name":"panic","description":"Whether or not the update cycle panicked. This happens when too many updates try to happen in a single frame","type":"boolean"}]}],"members":[{"annotation":"The function to call when an update occurs ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"_doUpdate","type":"Function"},{"annotation":"The function to call when a render occurs ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"_doRender","type":"Function"}],"name":"GameLoop","description":"The main game loop of the game. Keeps track of fps and handles scheduling of updates and rendering.This class is left abstract, so that a subclass can handle exactly how the loop is scheduled.For an example of different types of game loop scheduling, check out @link(Game Programming Patterns)(https:\/\/gameprogrammingpatterns.com\/game-loop.html)","abstract":true},"name":"GameLoop","type":"file"}],"name":"Loop","type":"folder"},{"data":[{"data":{"implements":["Region"],"parent":"GameNode","functions":[{"access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"sizeChanged","header":"sizeChanged(): void","description":"Called if the size vector is changed or replaced. ","returnDescription":null,"type":"void","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"scaleChanged","header":"scaleChanged(): void","description":"Called if the scale vector is changed or replaced ","returnDescription":null,"type":"void","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"updateBoundary","header":"updateBoundary(): void","description":"Called if the position, size, or scale of the CanvasNode is changed. Updates the boundary. ","returnDescription":null,"type":"void","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"contains","header":"contains(x: number, y: number): boolean","description":"Returns true if the point (x, y) is inside of this canvas object","returnDescription":"A flag representing whether or not this node contains the point.","type":"boolean","params":[{"name":"x","description":"The x position of the point","type":"number"},{"name":"y","description":"The y position of the point","type":"number"}]}],"members":[{"annotation":"A flag for whether or not the CanvasNode is visible ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"visible","type":"boolean"}],"name":"CanvasNode","description":"The representation of an object in the game world that can be drawn to the screen","abstract":true},"name":"CanvasNode","type":"file"},{"data":{"implements":["Positioned","Unique","Updateable","Physical","Actor","DebugRenderable"],"parent":null,"functions":[{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"move","header":"move(velocity: Vec2): void","description":"","returnDescription":null,"type":"void","params":[{"name":"velocity","description":"The velocity with which to move the object.","type":"Vec2"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"finishMove","header":"finishMove(): void","description":"","returnDescription":null,"type":"void","params":[{"name":"velocity","description":"The velocity with which the object will move.","type":""}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"addPhysics","header":"addPhysics(collisionShape?: Shape, colliderOffset?: Vec2, isCollidable: boolean = true, isStatic: boolean = false): void","description":"it will be used when no collision shape is specified (or if collision shape is null).","returnDescription":null,"type":"void","params":[{"name":"collisionShape","description":"The collider for this object. If this has a region (implements Region),","type":""},{"name":"isCollidable","description":"Whether this is collidable or not. True by default.","type":"boolean = true"},{"name":"isStatic","description":"Whether this is static or not. False by default","type":"boolean = false"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"addTrigger","header":"addTrigger(group: string, eventType: string): void","description":"","returnDescription":null,"type":"void","params":[{"name":"group","description":"The name of the group that will activate the trigger","type":"string"},{"name":"eventType","description":"The type of this event to send when this trigger is activated","type":"string"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"setPhysicsLayer","header":"setPhysicsLayer(layer: string): void","description":"","returnDescription":null,"type":"void","params":[{"name":"layer","description":"The physics layer this node should belong to","type":"string"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"setScene","header":"setScene(scene: Scene): void","description":"Sets the scene for this object.","returnDescription":null,"type":"void","params":[{"name":"scene","description":"The scene this object belongs to.","type":"Scene"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getScene","header":"getScene(): Scene","description":"Gets the scene this object is in.","returnDescription":"The scene this object belongs to","type":"Scene","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"setLayer","header":"setLayer(layer: Layer): void","description":"Sets the layer of this object.","returnDescription":null,"type":"void","params":[{"name":"layer","description":"The layer this object will be on.","type":"Layer"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getLayer","header":"getLayer(): Layer","description":"Returns the layer this object is on.","returnDescription":"This layer this object is on.","type":"Layer","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"positionChanged","header":"positionChanged(): void","description":"Called if the position vector is modified or replaced ","returnDescription":null,"type":"void","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"update","header":"update(deltaT: number): void","description":"Updates this GameNode","returnDescription":null,"type":"void","params":[{"name":"deltaT","description":"The timestep of the update.","type":"number"}]}],"members":[{"annotation":"An reference to the user input handler. This allows subclasses to easily access information about user input. ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"input","type":"InputReceiver"},{"annotation":"An event receiver. ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"receiver","type":"Receiver"},{"annotation":"An event emitter. ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"emitter","type":"Emitter"},{"annotation":"A reference to the scene this GameNode is a part of. ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"scene","type":"Scene"},{"annotation":"The visual layer this GameNode resides in. ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"layer","type":"Layer"},{"annotation":"A utility that allows the use of tweens on this GameNode ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"tweens","type":"TweenManager"},{"annotation":"A tweenable property for rotation. Does not affect the bounding box of this GameNode - Only rendering. ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"rotation","type":"number"},{"annotation":"The opacity value of this GameNode ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"alpha","type":"number"}],"name":"GameNode","description":"The representation of an object in the game world.To construct GameNodes, see the @reference[Scene] documentation.","abstract":true},"name":"GameNode","type":"file"},{"data":{"implements":[],"parent":"CanvasNode","functions":[{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"setColor","header":"setColor(color: Color)","description":"Sets the color of the Graphic. DEPRECATED","returnDescription":null,"type":"any","params":[{"name":"color","description":"The new color of the Graphic.","type":"Color"}]}],"members":[{"annotation":"The color of the Graphic ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"color","type":"Color"}],"name":"Graphic","description":"The representation of a game object that doesn't rely on any resources to render - it is drawn to the screen by the canvas","abstract":true},"name":"Graphic","type":"file"},{"data":[{"data":{"implements":[],"parent":"Graphic","functions":[],"members":[],"name":"Point","description":"A basic point to be drawn on the screen. ","abstract":false},"name":"Point","type":"file"},{"data":{"implements":[],"parent":"Graphic","functions":[{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"setBorderColor","header":"setBorderColor(color: Color): void","description":"Sets the border color of this rectangle","returnDescription":null,"type":"void","params":[{"name":"color","description":"The border color","type":"Color"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"setBorderWidth","header":"setBorderWidth(width: number)","description":"Sets the border width of this rectangle","returnDescription":null,"type":"any","params":[{"name":"width","description":"The width of the rectangle in pixels","type":"number"}]}],"members":[{"annotation":"The border color of the Rect ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"borderColor","type":"Color"},{"annotation":"The width of the border ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"borderWidth","type":"number"}],"name":"Rect","description":"A basic rectangle to be drawn on the screen. ","abstract":false},"name":"Rect","type":"file"}],"name":"Graphics","type":"folder"},{"data":[{"data":{"implements":[],"parent":"Sprite","functions":[{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getAnimationOffset","header":"getAnimationOffset(index: number): Vec2","description":"Gets the image offset for the current index of animation","returnDescription":"A Vec2 containing the image offset","type":"Vec2","params":[{"name":"index","description":"The index we're at in the animation","type":"number"}]}],"members":[{"annotation":"The number of columns in this sprite sheet ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"numCols","type":"number"},{"annotation":"The number of rows in this sprite sheet ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"numRows","type":"number"},{"annotation":"The animationManager for this sprite ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"animation","type":"AnimationManager"}],"name":"AnimatedSprite","description":"An sprite with specified animation frames. ","abstract":false},"name":"AnimatedSprite","type":"file"},{"data":{"implements":[],"parent":"CanvasNode","functions":[{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"setImageOffset","header":"setImageOffset(offset: Vec2): void","description":"Sets the offset of the sprite from (0, 0) in the image's coordinates","returnDescription":null,"type":"void","params":[{"name":"offset","description":"The offset of the sprite from (0, 0) in image coordinates","type":"Vec2"}]}],"members":[{"annotation":"The id of the image from the resourceManager ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"imageId","type":"string"},{"annotation":"The offset of the sprite in an atlas image ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"imageOffset","type":"Vec2"},{"annotation":"Whether or not the x-axis should be inverted on render ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"invertX","type":"boolean"},{"annotation":"Whether or not the y-axis should be inverted on render ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"invertY","type":"boolean"}],"name":"Sprite","description":"The representation of a sprite - an in-game image","abstract":false},"name":"Sprite","type":"file"}],"name":"Sprites","type":"folder"},{"data":{"implements":[],"parent":"CanvasNode","functions":[{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getTilesets","header":"getTilesets(): Tileset[]","description":"Returns an array of the tilesets associated with this tilemap","returnDescription":"An array of all of the tilesets assocaited with this tilemap.","type":"Tileset[]","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getTileSize","header":"getTileSize(): Vec2","description":"Returns the size of tiles in this tilemap as they appear in the game world after scaling","returnDescription":"A vector containing the size of tiles in this tilemap as they appear in the game world after scaling.","type":"Vec2","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getTileSizeWithZoom","header":"getTileSizeWithZoom(): Vec2","description":"Gets the tile size taking zoom into account","returnDescription":"The tile size with zoom","type":"Vec2","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"addPhysics","header":"addPhysics(): void","description":"Adds this tilemap to the physics system","returnDescription":null,"type":"void","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"abstract getTileAtWorldPosition","header":"abstract getTileAtWorldPosition(worldCoords: Vec2): number","description":"Returns the value of the tile at the specified position","returnDescription":"A number that represents the data value of the tile at the specified world position.","type":"number","params":[{"name":"worldCoords","description":"The position in world coordinates","type":"Vec2"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"abstract getTileWorldPosition","header":"abstract getTileWorldPosition(index: number): Vec2","description":"Returns the world position of the top left corner of the tile at the specified index","returnDescription":"The world position of the tile at the specified index","type":"Vec2","params":[{"name":"index","description":"The index of the tile in the tileData array","type":"number"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"abstract getTile","header":"abstract getTile(index: number): number","description":"Returns the value of the tile at the specified index","returnDescription":"The value of the tile in the tileData array","type":"number","params":[{"name":"index","description":"The index of the tile in the tileData array","type":"number"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"abstract setTile","header":"abstract setTile(index: number, type: number): void","description":"Sets the tile at the specified index","returnDescription":null,"type":"void","params":[{"name":"index","description":"The index of the tile","type":"number"},{"name":"type","description":"The new data value of the tile","type":"number"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"abstract parseTilemapData","header":"abstract parseTilemapData(tilemapData: TiledTilemapData, layer: TiledLayerData): void","description":"Sets up the tileset using the data loaded from file","returnDescription":null,"type":"void","params":[{"name":"tilemapData","description":"The tilemap data from file","type":"TiledTilemapData"},{"name":"layer","description":"The layer data from file","type":"TiledLayerData"}]}],"members":[{"annotation":"An array of the tilesets that this tilemap uses ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"tilesets","type":"Array<Tileset>"},{"annotation":"The size of a tile in this tilemap ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"tileSize","type":"Vec2"},{"annotation":"An array of tile data ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"data","type":"Array<number>"},{"annotation":"An array of tile collision data ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"collisionMap","type":"Array<boolean>"},{"annotation":"The name of the tilemap ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"name","type":"string"}],"name":"Tilemap","description":"The representation of a tilemap - this can consist of a combination of tilesets in one layer","abstract":true},"name":"Tilemap","type":"file"},{"data":[{"data":{"implements":[],"parent":"Tilemap","functions":[{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getDimensions","header":"getDimensions(): Vec2","description":"Gets the dimensions of the tilemap","returnDescription":"A Vec2 containing the number of columns and the number of rows in the tilemap.","type":"Vec2","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getTileAtWorldPosition","header":"getTileAtWorldPosition(worldCoords: Vec2): number","description":"Gets the data value of the tile at the specified world position","returnDescription":"The data value of the tile","type":"number","params":[{"name":"worldCoords","description":"The coordinates in world space","type":"Vec2"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getTileAtRowCol","header":"getTileAtRowCol(rowCol: Vec2): number","description":"Get the tile at the specified row and column","returnDescription":"The data value of the tile","type":"number","params":[{"name":"rowCol","description":"The coordinates in tilemap space","type":"Vec2"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getTileWorldPosition","header":"getTileWorldPosition(index: number): Vec2","description":"Gets the world position of the tile at the specified index","returnDescription":"A Vec2 containing the world position of the tile","type":"Vec2","params":[{"name":"index","description":"The index of the tile","type":"number"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getTile","header":"getTile(index: number): number","description":"Gets the data value of the tile at the specified index","returnDescription":"The data value of the tile","type":"number","params":[{"name":"index","description":"The index of the tile","type":"number"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"setTileAtRowCol","header":"setTileAtRowCol(rowCol: Vec2, type: number): void","description":"Sets the tile at the specified row and column","returnDescription":null,"type":"void","params":[{"name":"rowCol","description":"The position of the tile in tilemap space","type":"Vec2"},{"name":"type","description":"The new data value of the tile","type":"number"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"isTileCollidable","header":"isTileCollidable(indexOrCol: number, row?: number): boolean","description":"Returns true if the tile at the specified row and column of the tilemap is collidable","returnDescription":"A flag representing whether or not the tile is collidable.","type":"boolean","params":[{"name":"indexOrCol","description":"The index of the tile or the column it is in","type":"number"},{"name":"row","description":"The row the tile is in","type":""}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getColRowAt","header":"getColRowAt(worldCoords: Vec2): Vec2","description":"Takes in world coordinates and returns the row and column of the tile at that position","returnDescription":"A Vec2 containing the coordinates of the potential tile in tilemap space","type":"Vec2","params":[{"name":"worldCoords","description":"The coordinates of the potential tile in world space","type":"Vec2"}]}],"members":[{"annotation":"The number of columns in the tilemap ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"numCols","type":"number"},{"annotation":"The number of rows in the tilemap ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"numRows","type":"number"}],"name":"OrthogonalTilemap","description":"The representation of an orthogonal tilemap - i.e. a top down or platformer tilemap","abstract":false},"name":"OrthogonalTilemap","type":"file"}],"name":"Tilemaps","type":"folder"},{"data":{"implements":[],"parent":"CanvasNode","functions":[{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"calculateBackgroundColor","header":"calculateBackgroundColor(): string","description":"Overridable method for calculating background color - useful for elements that want to be colored on different after certain events","returnDescription":"The background color of the UIElement","type":"string","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"calculateBorderColor","header":"calculateBorderColor(): string","description":"Overridable method for calculating border color - useful for elements that want to be colored on different after certain events","returnDescription":"The border color of the UIElement","type":"string","params":[]}],"members":[{"annotation":"The backgound color ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"backgroundColor","type":"Color"},{"annotation":"The border color ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"borderColor","type":"Color"},{"annotation":"The border radius ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"borderRadius","type":"number"},{"annotation":"The border width ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"borderWidth","type":"number"},{"annotation":"The padding ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"padding","type":"Vec2"},{"annotation":"The reaction of this UIElement on a click ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"onClick","type":"Function"},{"annotation":"The event propagated on click ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"onClickEventId","type":"string"},{"annotation":"The reaction to the release of a click ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"onRelease","type":"Function"},{"annotation":"The event propagated on the release of a click ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"onReleaseEventId","type":"string"},{"annotation":"The reaction when a mouse enters this UIElement ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"onEnter","type":"Function"},{"annotation":"The event propagated when a mouse enters this UIElement ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"onEnterEventId","type":"string"},{"annotation":"The reaction when a mouse leaves this UIElement ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"onLeave","type":"Function"},{"annotation":"The event propogated when a mouse leaves this UIElement ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"onLeaveEventId","type":"string"},{"annotation":"Whether or not this UIElement is currently clicked on ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"isClicked","type":"boolean"},{"annotation":"Whether or not this UIElement is currently hovered over ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"isEntered","type":"boolean"}],"name":"UIElement","description":"The representation of a UIElement - the parent class of things like buttons","abstract":true},"name":"UIElement","type":"file"},{"data":[{"data":{"implements":[],"parent":"Label","functions":[],"members":[],"name":"Button","description":"A clickable button UIElement ","abstract":false},"name":"Button","type":"file"},{"data":{"implements":[],"parent":"UIElement","functions":[{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getFontString","header":"getFontString(): string","description":"Gets a string containg the font details for rendering","returnDescription":"A string containing the font details","type":"string","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"calculateTextColor","header":"calculateTextColor(): string","description":"Overridable method for calculating text color - useful for elements that want to be colored on different after certain events","returnDescription":"a string containg the text color","type":"string","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"calculateTextWidth","header":"calculateTextWidth(ctx: CanvasRenderingContext2D): number","description":"Uses the canvas to calculate the width of the text","returnDescription":"A number representing the rendered text width","type":"number","params":[{"name":"ctx","description":"The rendering context","type":"CanvasRenderingContext2D"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"calculateTextOffset","header":"calculateTextOffset(ctx: CanvasRenderingContext2D): Vec2","description":"Calculate the offset of the text - this is used for rendering text with different alignments","returnDescription":"The offset of the text in a Vec2","type":"Vec2","params":[{"name":"ctx","description":"The rendering context","type":"CanvasRenderingContext2D"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"autoSize","header":"autoSize(ctx: CanvasRenderingContext2D): void","description":"Automatically sizes the element to the text within it","returnDescription":null,"type":"void","params":[{"name":"ctx","description":"The rendering context","type":"CanvasRenderingContext2D"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"handleInitialSizing","header":"handleInitialSizing(ctx: CanvasRenderingContext2D): void","description":"Initially assigns a size to the UIElement if none is provided","returnDescription":null,"type":"void","params":[{"name":"ctx","description":"The rendering context","type":"CanvasRenderingContext2D"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"sizeToText","header":"sizeToText(): void","description":"On the next render, size this element to it's current text using its current font size ","returnDescription":null,"type":"void","params":[]}],"members":[{"annotation":"The color of the text of this UIElement ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"textColor","type":"Color"},{"annotation":"The value of the text of this UIElement ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"text","type":"string"},{"annotation":"The name of the font ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"font","type":"string"},{"annotation":"The size of the font ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"fontSize","type":"number"},{"annotation":"The horizontal alignment of the text within the label ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"hAlign","type":"string"},{"annotation":"The vertical alignment of text within the label ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"vAlign","type":"string"},{"annotation":"A flag for if the width of the text has been measured on the canvas for auto width assignment ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"sizeAssigned","type":"boolean"}],"name":"Label","description":"A basic text-containing label ","abstract":false},"name":"Label","type":"file"},{"data":{"implements":[],"parent":"UIElement","functions":[{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getValue","header":"getValue(): number","description":"Retrieves the value of the slider","returnDescription":"The value of the slider","type":"number","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"valueChanged","header":"valueChanged(): void","description":"A method called in response to the value changing ","returnDescription":null,"type":"void","params":[]}],"members":[{"annotation":"The value of the slider from [0, 1] ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"value","type":"number"},{"annotation":"The color of the slider nib ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"nibColor","type":"Color"},{"annotation":"The color of the slider track ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"sliderColor","type":"Color"},{"annotation":"The reaction of this UIElement to a value change ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"onValueChange","type":"Function"},{"annotation":"The event propagated by this UIElement when value changes ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"onValueChangeEventId","type":"string"}],"name":"Slider","description":"A slider UIElement ","abstract":false},"name":"Slider","type":"file"},{"data":{"implements":[],"parent":"Label","functions":[],"members":[{"annotation":"A flag the represents whether the user can type in this TextInput ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"focused","type":"boolean"},{"annotation":"The position of the cursor in this TextInput ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"cursorCounter","type":"number"}],"name":"TextInput","description":"A text input UIElement ","abstract":false},"name":"TextInput","type":"file"}],"name":"UIElements","type":"folder"}],"name":"Nodes","type":"folder"},{"data":[{"data":{"implements":[],"parent":null,"functions":[{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"addNavigableEntity","header":"addNavigableEntity(navName: string, nav: Navigable): void","description":"Adds a navigable entity to the NavigationManager","returnDescription":null,"type":"void","params":[{"name":"navName","description":"The name of the navigable entitry","type":"string"},{"name":"nav","description":"The actual Navigable instance","type":"Navigable"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getPath","header":"getPath(navName: string, fromPosition: Vec2, toPosition: Vec2): NavigationPath","description":"Gets a path frome one point to another using a specified Navigable object","returnDescription":"A NavigationPath containing the route to take over the Navigable entity to get between the provided positions.","type":"NavigationPath","params":[{"name":"navName","description":"The name of the registered Navigable object","type":"string"},{"name":"fromPosition","description":"The starting position of navigation","type":"Vec2"},{"name":"toPosition","description":"The ending position of Navigation","type":"Vec2"}]}],"members":[{"annotation":"The list of all navigable entities ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"navigableEntities","type":"Map<Navigable>"}],"name":"NavigationManager","description":"The manager class for navigation.Handles all navigable entities, such and allows them to be accessed by outside systems by requesting a pathfrom one position to another.","abstract":false},"name":"NavigationManager","type":"file"},{"data":{"implements":[],"parent":null,"functions":[{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"isDone","header":"isDone(): boolean","description":"Returns the status of navigation along this NavigationPath","returnDescription":"True if the node has reached the end of the path, false otherwise","type":"boolean","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getMoveDirection","header":"getMoveDirection(node: GameNode): Vec2","description":"Gets the movement direction in the current position along the path","returnDescription":"The movement direction as a Vec2","type":"Vec2","params":[{"name":"node","description":"The node to move along the path","type":"GameNode"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"handlePathProgress","header":"handlePathProgress(node: GameNode): void","description":"Updates this NavigationPath to the current state of the GameNode","returnDescription":null,"type":"void","params":[{"name":"node","description":"The node moving along the path","type":"GameNode"}]}],"members":[{"annotation":"The navigation path, stored as a stack of next positions ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"path","type":"Stack<Vec2>"},{"annotation":"The current direction of movement ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"currentMoveDirection","type":"Vec2"},{"annotation":"The distance a node must be to a point to consider it as having arrived ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"distanceThreshold","type":"number"}],"name":"NavigationPath","constructor":{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"constructor","header":"constructor(path: Stack<Vec2>)","description":"Constructs a new NavigationPath","returnDescription":null,"type":"any","params":[{"name":"path","description":"The path of nodes to take","type":"Stack<Vec2>"}]},"description":"A path that AIs can follow. Uses finishMove() in Physical to determine progress on the route","abstract":false},"name":"NavigationPath","type":"file"},{"data":{"implements":["Navigable"],"parent":null,"functions":[{"access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"getClosestNode","header":"getClosestNode(position: Vec2): number","description":"Gets the closest node in this Navmesh to the specified position","returnDescription":"The index of the closest node in the Navmesh to the position","type":"number","params":[{"name":"position","description":"The position to query","type":"Vec2"}]}],"members":[{"annotation":"The graph of points in the NavMesh ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"graph","type":"PositionGraph"}],"name":"Navmesh","constructor":{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"constructor","header":"constructor(graph: PositionGraph)","description":"Creates a new Navmesh from the points in the speecified graph","returnDescription":null,"type":"any","params":[{"name":"graph","description":"The graph to construct a navmesh from","type":"PositionGraph"}]},"description":"An implementation of a Navmesh. Navmeshes are graphs in the game world along which nodes can move.","abstract":false},"name":"Navmesh","type":"file"}],"name":"Pathfinding","type":"folder"},{"data":[{"data":[],"name":"BroadPhaseAlgorithms","type":"folder"},{"data":{"implements":["Updateable"],"parent":null,"functions":[{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"abstract registerObject","header":"abstract registerObject(object: GameNode): void","description":"Registers a gamenode with this physics manager","returnDescription":null,"type":"void","params":[{"name":"object","description":"The object to register","type":"GameNode"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"abstract registerTilemap","header":"abstract registerTilemap(tilemap: Tilemap): void","description":"Registers a tilemap with this physics manager","returnDescription":null,"type":"void","params":[{"name":"tilemap","description":"The tilemap to register","type":"Tilemap"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"setLayer","header":"setLayer(node: GameNode, layer: string): void","description":"Sets the physics layer of the GameNode","returnDescription":null,"type":"void","params":[{"name":"node","description":"The GameNode","type":"GameNode"},{"name":"layer","description":"The layer that the GameNode should be on","type":"string"}]}],"members":[{"annotation":"The event receiver for the physics system ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"receiver","type":"Receiver"},{"annotation":"The event emitter for the physics system ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"emitter","type":"Emitter"},{"annotation":"Maps layer names to numbers ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"layerMap","type":"Map<number>"},{"annotation":"Maps layer numbers to names ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"layerNames","type":"Array<string>"}],"name":"PhysicsManager","description":"An abstract physics manager.This class exposes functions for subclasses to implement that should allow for a working physics system to be created.","abstract":true},"name":"PhysicsManager","type":"file"},{"data":{"implements":[],"parent":"PhysicsManager","functions":[{"access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"collideWithOrthogonalTilemap","header":"collideWithOrthogonalTilemap(node: Physical, tilemap: OrthogonalTilemap, overlaps: Array<AreaCollision>): void","description":"Handles a collision between this node and an orthogonal tilemap","returnDescription":null,"type":"void","params":[{"name":"node","description":"The node","type":"Physical"},{"name":"tilemap","description":"The tilemap the node may be colliding with","type":"OrthogonalTilemap"},{"name":"overlaps","description":"The list of overlaps","type":"Array<AreaCollision>"}]}],"members":[{"annotation":"The array of static nodes ","access":{"isGetter":false,"isStatic":true,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"Nodes","type":"Array<Physical>"},{"annotation":"The array of dynamic nodes ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"dynamicNodes","type":"Array<Physical>"},{"annotation":"The array of tilemaps ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"tilemaps","type":"Array<Tilemap>"}],"name":"TestPhysicsManager","description":"ALGORITHM:In an effort to keep things simple and working effectively, each dynamic node will resolve itscollisions considering the rest of the world as static.Collision detecting will happen first. This can be considered a broad phase, but it is not especiallyefficient, as it does not need to be for this game engine. Every dynamic node is checked against everyother node for collision area. If collision area is non-zero (meaning the current node sweeps into another),it is added to a list of hits.INITIALIZATION:- Physics constants are reset- Swept shapes are recalculated. If a node isn't moving, it is skipped.COLLISION DETECTION:- For a node, collision area will be calculated using the swept AABB of the node against every other AABB in a static state- These collisions will be sorted by area in descending orderCOLLISION RESOLUTION:- For each hit, time of collision is calculated using a swept line through the AABB of the static node expandedwith minkowski sums (discretely, but the concept is there)- The collision is resolved based on the near time of the collision (from method of separated axes)- X is resolved by near x, Y by near y.- There is some fudging to allow for sliding along walls of separate colliders. Sorting by area also helps with this.- Corner to corner collisions are resolve to favor x-movement. This is in consideration of platformers, to givethe player some help with jumpsPros:- Everything happens with a consistent time. There is a distinct before and after for each resolution.- No back-tracking needs to be done. Once we resolve a node, it is definitively resolved.Cons:- Nodes that are processed early have movement priority over other nodes. This can lead to some undesirable interactions.","abstract":false},"name":"TestPhysicsManager","type":"file"}],"name":"Physics","type":"folder"},{"data":[],"name":"Playback","type":"folder"},{"data":[{"data":[{"data":{"implements":[],"parent":null,"functions":[{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"add","header":"add(key: string, animation: AnimationData): void","description":"Add an animation to this sprite","returnDescription":null,"type":"void","params":[{"name":"key","description":"The unique key of the animation","type":"string"},{"name":"animation","description":"The animation data","type":"AnimationData"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getIndex","header":"getIndex(): number","description":"Gets the index specified by the current animation and current frame","returnDescription":"The index in the current animation","type":"number","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getIndexAndAdvanceAnimation","header":"getIndexAndAdvanceAnimation(): number","description":"Retrieves the current animation index and advances the animation frame","returnDescription":"The index of the animation frame","type":"number","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"endCurrentAnimation","header":"endCurrentAnimation(): void","description":"Ends the current animation and fires any necessary events, as well as starting any new animations ","returnDescription":null,"type":"void","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"play","header":"play(animation: string, loop: boolean = false, onEnd?: string): void","description":"Plays the specified animation","returnDescription":null,"type":"void","params":[{"name":"animation","description":"The name of the animation to play","type":"string"},{"name":"loop","description":"Whether or not to loop the animation. False by default","type":"boolean = false"},{"name":"onEnd","description":"The name of an event to send when this animation naturally stops playing. This only matters if loop is false.","type":""}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"queue","header":"queue(animation: string, loop: boolean = false, onEnd?: string): void","description":"Queues a single animation to be played after the current one. Does NOT stack.Queueing additional animations past 1 will just replace the queued animation","returnDescription":null,"type":"void","params":[{"name":"animation","description":"The animation to queue","type":"string"},{"name":"loop","description":"Whether or not the loop the queued animation","type":"boolean = false"},{"name":"onEnd","description":"The event to fire when the queued animation ends","type":""}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"pause","header":"pause(): void","description":"Pauses the current animation ","returnDescription":null,"type":"void","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"resume","header":"resume(): void","description":"Resumes the current animation if possible ","returnDescription":null,"type":"void","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"stop","header":"stop(): void","description":"Stops the current animation. The animation cannot be resumed after this. ","returnDescription":null,"type":"void","params":[]}],"members":[{"annotation":"The owner of this animation manager ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"owner","type":"CanvasNode"},{"annotation":"The current animation state of this sprite ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"animationState","type":"AnimationState"},{"annotation":"The name of the current animation of this sprite ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"currentAnimation","type":"string"},{"annotation":"The current frame of this animation ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"currentFrame","type":"number"},{"annotation":"The progress of the current animation through the current frame ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"frameProgress","type":"number"},{"annotation":"Whether the current animation is looping or not ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"loop","type":"boolean"},{"annotation":"The map of animations ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"animations","type":"Map<AnimationData>"},{"annotation":"The name of the event (if any) to send when the current animation stops playing. ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"onEndEvent","type":"string"},{"annotation":"The event emitter for this animation manager ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"emitter","type":"Emitter"},{"annotation":"A queued animation ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"pendingAnimation","type":"string"},{"annotation":"The loop status of a pending animation ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"pendingLoop","type":"boolean"},{"annotation":"The onEnd event of a pending animation ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"pendingOnEnd","type":"string"}],"name":"AnimationManager","constructor":{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"constructor","header":"constructor(owner: CanvasNode)","description":"Creates a new AnimationManager","returnDescription":null,"type":"any","params":[{"name":"owner","description":"The owner of the AnimationManager","type":"CanvasNode"}]},"description":"An animation manager class for an animated CanvasNode.This class keeps track of the possible animations, as well as the current animation state,and abstracts all interactions with playing, pausing, and stopping animations as well ascreating new animations from the CanvasNode.","abstract":false},"name":"AnimationManager","type":"file"},{"data":{"implements":[],"parent":null,"functions":[{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"add","header":"add(key: string, tween: Record<string, any> | TweenData): void","description":"Add a tween to this game node","returnDescription":null,"type":"void","params":[{"name":"key","description":"The name of the tween","type":"string"},{"name":"tween","description":"The data of the tween","type":"Record<string, any> | TweenData"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"play","header":"play(key: string, loop?: boolean): void","description":"Play a tween with a certain name","returnDescription":null,"type":"void","params":[{"name":"key","description":"The name of the tween to play","type":"string"},{"name":"loop","description":"Whether or not the tween should loop","type":""}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"pause","header":"pause(key: string): void","description":"Pauses a playing tween. Does not affect tweens that are stopped.","returnDescription":null,"type":"void","params":[{"name":"key","description":"The name of the tween to pause.","type":"string"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"resume","header":"resume(key: string): void","description":"Resumes a paused tween.","returnDescription":null,"type":"void","params":[{"name":"key","description":"The name of the tween to resume","type":"string"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"stop","header":"stop(key: string): void","description":"Stops a currently playing tween","returnDescription":null,"type":"void","params":[{"name":"key","description":"The key of the tween","type":"string"}]}],"members":[{"annotation":"The GameNode this TweenManager acts upon ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"owner","type":"GameNode"},{"annotation":"The list of created tweens ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"tweens","type":"Map<TweenData>"}],"name":"TweenManager","constructor":{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"constructor","header":"constructor(owner: GameNode)","description":"Creates a new TweenManager","returnDescription":null,"type":"any","params":[{"name":"owner","description":"The owner of the TweenManager","type":"GameNode"}]},"description":"A manager for the tweens of a GameNode.Tweens are short animations played by interpolating between two properties using an easing function.For a good visual representation of easing functions, check out @link(https:\/\/easings.net\/)(https:\/\/easings.net\/).Multiple tween can be played at the same time, as long as they don't change the same property.This allows for some interesting polishes or animations that may be very difficult to do with sprite work alone- especially pixel art (such as rotations or scaling).","abstract":false},"name":"TweenManager","type":"file"}],"name":"Animations","type":"folder"},{"data":{"implements":[],"parent":"RenderingManager","functions":[{"access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"renderNode","header":"renderNode(node: CanvasNode): void","description":"Renders a specified CanvasNode","returnDescription":null,"type":"void","params":[{"name":"node","description":"The CanvasNode to render","type":"CanvasNode"}]}],"members":[],"name":"CanvasRenderer","description":"An implementation of the RenderingManager class using CanvasRenderingContext2D.","abstract":false},"name":"CanvasRenderer","type":"file"},{"data":[{"data":{"implements":[],"parent":null,"functions":[{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"setScene","header":"setScene(scene: Scene): void","description":"Sets the scene of this GraphicRenderer","returnDescription":null,"type":"void","params":[{"name":"scene","description":"The current scene","type":"Scene"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"renderPoint","header":"renderPoint(point: Point, zoom: number): void","description":"Renders a point","returnDescription":null,"type":"void","params":[{"name":"point","description":"The point to render","type":"Point"},{"name":"zoom","description":"The zoom level","type":"number"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"renderRect","header":"renderRect(rect: Rect, zoom: number): void","description":"Renders a rect","returnDescription":null,"type":"void","params":[{"name":"rect","description":"The rect to render","type":"Rect"},{"name":"zoom","description":"The zoom level","type":"number"}]}],"members":[{"annotation":"The resource manager of the game engine ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"resourceManager","type":"ResourceManager"},{"annotation":"The current scene ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"scene","type":"Scene"},{"annotation":"The rendering context ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"ctx","type":"CanvasRenderingContext2D"}],"name":"GraphicRenderer","description":"A utility class to help the @reference[CanvasRenderer] render @reference[Graphic]s","abstract":false},"name":"GraphicRenderer","type":"file"},{"data":{"implements":[],"parent":null,"functions":[{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"setScene","header":"setScene(scene: Scene): void","description":"Sets the scene of this TilemapRenderer","returnDescription":null,"type":"void","params":[{"name":"scene","description":"The current scene","type":"Scene"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"renderOrthogonalTilemap","header":"renderOrthogonalTilemap(tilemap: OrthogonalTilemap): void","description":"Renders an orthogonal tilemap","returnDescription":null,"type":"void","params":[{"name":"tilemap","description":"The tilemap to render","type":"OrthogonalTilemap"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"renderTile","header":"renderTile(tileset: Tileset, tileIndex: number, tilemapRow: number, tilemapCol: number, origin: Vec2, scale: Vec2, zoom: number): void","description":"Renders a tile","returnDescription":null,"type":"void","params":[{"name":"tileset","description":"The tileset this tile belongs to ","type":"Tileset"},{"name":"tileIndex","description":"The index of the tile","type":"number"},{"name":"tilemapRow","description":"The row of the tile in the tilemap","type":"number"},{"name":"tilemapCol","description":"The column of the tile in the tilemap","type":"number"},{"name":"origin","description":"The origin of the viewport","type":"Vec2"},{"name":"scale","description":"The scale of the tilemap","type":"Vec2"},{"name":"zoom","description":"The zoom level of the viewport","type":"number"}]}],"members":[],"name":"TilemapRenderer","description":"A utility class for the @reference[CanvasRenderer] to render @reference[Tilemap]s","abstract":false},"name":"TilemapRenderer","type":"file"},{"data":{"implements":[],"parent":null,"functions":[{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"setScene","header":"setScene(scene: Scene): void","description":"Sets the scene of this UIElementRenderer","returnDescription":null,"type":"void","params":[{"name":"scene","description":"The current scene","type":"Scene"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"renderLabel","header":"renderLabel(label: Label): void","description":"Renders a label","returnDescription":null,"type":"void","params":[{"name":"label","description":"The label to render","type":"Label"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"renderButton","header":"renderButton(button: Button): void","description":"Renders a button","returnDescription":null,"type":"void","params":[{"name":"button","description":"The button to render","type":"Button"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"renderSlider","header":"renderSlider(slider: Slider): void","description":"Renders a slider","returnDescription":null,"type":"void","params":[{"name":"slider","description":"The slider to render","type":"Slider"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"renderTextInput","header":"renderTextInput(textInput: TextInput): void","description":"Renders a textInput","returnDescription":null,"type":"void","params":[{"name":"textInput","description":"The textInput to render","type":"TextInput"}]}],"members":[],"name":"UIElementRenderer","description":"A utility class to help the @reference[CanvasRenderer] render @reference[UIElement]s","abstract":false},"name":"UIElementRenderer","type":"file"}],"name":"CanvasRendering","type":"folder"},{"data":{"implements":[],"parent":null,"functions":[{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"setScene","header":"setScene(scene: Scene): void","description":"Sets the scene currently being rendered","returnDescription":null,"type":"void","params":[{"name":"scene","description":"The current Scene","type":"Scene"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"abstract initializeCanvas","header":"abstract initializeCanvas(canvas: HTMLCanvasElement, width: number, height: number): any","description":"Initialize the canvas for the game","returnDescription":"The rendering context of the canvas","type":"any","params":[{"name":"canvas","description":"The canvas element","type":"HTMLCanvasElement"},{"name":"width","description":"The desired width of the canvas","type":"number"},{"name":"height","description":"The desired height of the canvas","type":"number"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"abstract render","header":"abstract render(visibleSet: Array<CanvasNode>, tilemaps: Array<Tilemap>, uiLayers: Map<UILayer>): void","description":"Renders the visible set of CanvasNodes and visible portions of tilemaps, as well as any UIElement in UILayers","returnDescription":null,"type":"void","params":[{"name":"visibleSet","description":"The visible set of CanvasNodes","type":"Array<CanvasNode>"},{"name":"tilemaps","description":"The tilemaps used in the application","type":"Array<Tilemap>"},{"name":"uiLayers","description":"The user interface layers","type":"Map<UILayer>"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"abstract renderSprite","header":"abstract renderSprite(sprite: Sprite): void","description":"Renders a sprite","returnDescription":null,"type":"void","params":[{"name":"sprite","description":"The sprite to render","type":"Sprite"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"abstract renderAnimatedSprite","header":"abstract renderAnimatedSprite(sprite: AnimatedSprite): void","description":"Renders an animated sprite","returnDescription":null,"type":"void","params":[{"name":"sprite","description":"The animated sprite to render","type":"AnimatedSprite"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"abstract renderGraphic","header":"abstract renderGraphic(graphic: Graphic): void","description":"Renders a graphic","returnDescription":null,"type":"void","params":[{"name":"graphic","description":"The graphic to render","type":"Graphic"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"abstract renderTilemap","header":"abstract renderTilemap(tilemap: Tilemap): void","description":"Renders a tilemap","returnDescription":null,"type":"void","params":[{"name":"tilemap","description":"The tilemap to render","type":"Tilemap"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"abstract renderUIElement","header":"abstract renderUIElement(uiElement: UIElement): void","description":"Renders a UIElement","returnDescription":null,"type":"void","params":[{"name":"uiElement","description":"The UIElement to render","type":"UIElement"}]}],"members":[{"annotation":"The ResourceManager ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"resourceManager","type":"ResourceManager"},{"annotation":"The scene currently being rendered ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"scene","type":"Scene"}],"name":"RenderingManager","description":"An abstract framework to put all rendering in once place in the application","abstract":true},"name":"RenderingManager","type":"file"}],"name":"Rendering","type":"folder"},{"data":[{"data":{"implements":[],"parent":null,"functions":[{"access":{"isGetter":false,"isStatic":true,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getInstance","header":"getInstance(): ResourceManager","description":"Returns the current instance of this class or a new instance if none exist","returnDescription":"The resource manager","type":"ResourceManager","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"image","header":"image(key: string, path: string): void","description":"Loads an image from file","returnDescription":null,"type":"void","params":[{"name":"key","description":"The key to associate the loaded image with","type":"string"},{"name":"path","description":"The path to the image to load","type":"string"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getImage","header":"getImage(key: string): HTMLImageElement","description":"Retrieves a loaded image","returnDescription":"The image element associated with this key","type":"HTMLImageElement","params":[{"name":"key","description":"The key of the loaded image","type":"string"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"spritesheet","header":"spritesheet(key: string, path: string): void","description":"Loads a spritesheet from file","returnDescription":null,"type":"void","params":[{"name":"key","description":"The key to associate the loaded spritesheet with","type":"string"},{"name":"path","description":"The path to the spritesheet to load","type":"string"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getSpritesheet","header":"getSpritesheet(key: string): Spritesheet","description":"Retrieves a loaded spritesheet","returnDescription":"The loaded Spritesheet","type":"Spritesheet","params":[{"name":"key","description":"The key of the spritesheet to load","type":"string"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"audio","header":"audio(key: string, path: string): void","description":"Loads an audio file","returnDescription":null,"type":"void","params":[{"name":"key","description":"The key to associate with the loaded audio file","type":"string"},{"name":"path","description":"The path to the audio file to load","type":"string"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getAudio","header":"getAudio(key: string): AudioBuffer","description":"Retrieves a loaded audio file","returnDescription":"The AudioBuffer created from the loaded audio fle","type":"AudioBuffer","params":[{"name":"key","description":"The key of the audio file to load","type":"string"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"tilemap","header":"tilemap(key: string, path: string): void","description":"Load a tilemap from a json file. Automatically loads related images","returnDescription":null,"type":"void","params":[{"name":"key","description":"The key to associate with the loaded tilemap","type":"string"},{"name":"path","description":"The path to the tilemap to load","type":"string"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getTilemap","header":"getTilemap(key: string): TiledTilemapData","description":"Retreives a loaded tilemap","returnDescription":"The tilemap data associated with the key","type":"TiledTilemapData","params":[{"name":"key","description":"The key of the loaded tilemap","type":"string"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"loadResourcesFromQueue","header":"loadResourcesFromQueue(callback: Function): void","description":"Loads all resources currently in the queue","returnDescription":null,"type":"void","params":[{"name":"callback","description":"The function to cal when the resources are finished loading","type":"Function"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"unloadAllResources","header":"unloadAllResources(): void","description":"Deletes references to all resources in the resource manager","returnDescription":null,"type":"void","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"loadTilemapsFromQueue","header":"loadTilemapsFromQueue(onFinishLoading: Function): void","description":"Loads all tilemaps currently in the tilemap loading queue","returnDescription":null,"type":"void","params":[{"name":"onFinishLoading","description":"The function to call when loading is complete","type":"Function"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"loadTilemap","header":"loadTilemap(key: string, pathToTilemapJSON: string, callbackIfLast: Function): void","description":"Loads a singular tilemap","returnDescription":null,"type":"void","params":[{"name":"key","description":"The key of the tilemap","type":"string"},{"name":"pathToTilemapJSON","description":"The path to the tilemap JSON file","type":"string"},{"name":"callbackIfLast","description":"The function to call if this is the last tilemap to load","type":"Function"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"finishLoadingTilemap","header":"finishLoadingTilemap(callback: Function): void","description":"Finish loading a tilemap. Calls the callback function if this is the last tilemap being loaded","returnDescription":null,"type":"void","params":[{"name":"callback","description":"The function to call if this is the last tilemap to load","type":"Function"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"loadSpritesheetsFromQueue","header":"loadSpritesheetsFromQueue(onFinishLoading: Function): void","description":"Loads all spritesheets currently in the spritesheet loading queue","returnDescription":null,"type":"void","params":[{"name":"onFinishLoading","description":"The function to call when the spritesheets are done loading","type":"Function"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"loadSpritesheet","header":"loadSpritesheet(key: string, pathToSpritesheetJSON: string, callbackIfLast: Function): void","description":"Loads a singular spritesheet","returnDescription":null,"type":"void","params":[{"name":"key","description":"The key of the spritesheet to load","type":"string"},{"name":"pathToSpritesheetJSON","description":"The path to the spritesheet JSON file","type":"string"},{"name":"callbackIfLast","description":"The function to call if this is the last spritesheet","type":"Function"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"finishLoadingSpritesheet","header":"finishLoadingSpritesheet(callback: Function): void","description":"Finish loading a spritesheet. Calls the callback function if this is the last spritesheet being loaded","returnDescription":null,"type":"void","params":[{"name":"callback","description":"The function to call if this is the last spritesheet to load","type":"Function"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"loadImagesFromQueue","header":"loadImagesFromQueue(onFinishLoading: Function): void","description":"Loads all images currently in the image loading queue","returnDescription":null,"type":"void","params":[{"name":"onFinishLoading","description":"The function to call when there are no more images to load","type":"Function"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"loadImage","header":"loadImage(key: string, path: string, callbackIfLast: Function): void","description":"Loads a singular image","returnDescription":null,"type":"void","params":[{"name":"key","description":"The key of the image to load","type":"string"},{"name":"path","description":"The path to the image to load","type":"string"},{"name":"callbackIfLast","description":"The function to call if this is the last image","type":"Function"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"finishLoadingImage","header":"finishLoadingImage(callback: Function): void","description":"Finish loading an image. If this is the last image, it calls the callback function","returnDescription":null,"type":"void","params":[{"name":"callback","description":"The function to call if this is the last image","type":"Function"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"loadAudioFromQueue","header":"loadAudioFromQueue(onFinishLoading: Function)","description":"Loads all audio currently in the tilemap loading queue","returnDescription":null,"type":"any","params":[{"name":"onFinishLoading","description":"The function to call when tilemaps are done loading","type":"Function"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"loadAudio","header":"loadAudio(key: string, path: string, callbackIfLast: Function): void","description":"Load a singular audio file","returnDescription":null,"type":"void","params":[{"name":"key","description":"The key to the audio file to load","type":"string"},{"name":"path","description":"The path to the audio file to load","type":"string"},{"name":"callbackIfLast","description":"The function to call if this is the last audio file to load","type":"Function"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"finishLoadingAudio","header":"finishLoadingAudio(callback: Function): void","description":"Finish loading an audio file. Calls the callback functon if this is the last audio sample being loaded.","returnDescription":null,"type":"void","params":[{"name":"callback","description":"The function to call if this is the last audio file to load","type":"Function"}]}],"members":[{"annotation":"Whether or not any resources are loading ","access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"loading","type":"boolean"},{"annotation":"A boolean to indicate that the assets just finished loading ","access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"justLoaded","type":"boolean"},{"annotation":"A function that is called when loading progresses ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"onLoadProgress","type":"Function"},{"annotation":"A function that is called when loading completes ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"onLoadComplete","type":"Function"},{"annotation":"Number to keep track of how many images need to be loaded","access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"loadonly_imagesLoaded","type":"number"},{"annotation":"Number to keep track of how many images are loaded ","access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"loadonly_imagesToLoad","type":"number"},{"annotation":"The queue of images we must load ","access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"loadonly_imageLoadingQueue","type":"Queue<KeyPathPair>"},{"annotation":"A map of the images that are currently loaded and being used by the scene. The reference to these images only exist here for easy cleanup. ","access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"images","type":"Map<HTMLImageElement>"},{"annotation":"Number to keep track of how many tilemaps need to be loaded ","access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"loadonly_spritesheetsLoaded","type":"number"},{"annotation":"Number to keep track of how many tilemaps are loaded ","access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"loadonly_spritesheetsToLoad","type":"number"},{"annotation":"The queue of tilemaps we must load ","access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"loadonly_spritesheetLoadingQueue","type":"Queue<KeyPathPair>"},{"annotation":"A map of the tilemaps that are currently loaded and (presumably) being used by the scene ","access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"spritesheets","type":"Map<Spritesheet>"},{"annotation":"Number to keep track of how many tilemaps need to be loaded ","access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"loadonly_tilemapsLoaded","type":"number"},{"annotation":"Number to keep track of how many tilemaps are loaded ","access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"loadonly_tilemapsToLoad","type":"number"},{"annotation":"The queue of tilemaps we must load ","access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"loadonly_tilemapLoadingQueue","type":"Queue<KeyPathPair>"},{"annotation":"A map of the tilemaps that are currently loaded and (presumably) being used by the scene ","access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"tilemaps","type":"Map<TiledTilemapData>"},{"annotation":"Number to keep track of how many sounds need to be loaded ","access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"loadonly_audioLoaded","type":"number"},{"annotation":"Number to keep track of how many sounds are loaded ","access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"loadonly_audioToLoad","type":"number"},{"annotation":"The queue of sounds we must load ","access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"loadonly_audioLoadingQueue","type":"Queue<KeyPathPair>"},{"annotation":"A map of the sounds that are currently loaded and (presumably) being used by the scene ","access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"audioBuffers","type":"Map<AudioBuffer>"},{"annotation":"The total number of \"types\" of things that need to be loaded (i.e. images and tilemaps) ","access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"loadonly_typesToLoad","type":"number"}],"name":"ResourceManager","description":"The resource manager for the game engine.The resource manager interfaces with the loadable assets of a game such as images, data files,and sounds, which are all found in the dist folder.This class controls loading and updates the @reference[Scene] with the loading progress, so that the scene doesnot start before all necessary assets are loaded.","abstract":false},"name":"ResourceManager","type":"file"}],"name":"ResourceManager","type":"folder"},{"data":[{"data":[{"data":{"implements":[],"parent":null,"functions":[{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"uiElement","header":"uiElement(type: string | UIElementType, layerName: string, options?: Record<string, any>): UIElement","description":"Adds an instance of a UIElement to the current scene - i.e. any class that extends UIElement","returnDescription":"A new UIElement","type":"UIElement","params":[{"name":"type","description":"The type of UIElement to add","type":"string | UIElementType"},{"name":"layerName","description":"The layer to add the UIElement to","type":"string"},{"name":"options","description":"Any additional arguments to feed to the constructor","type":""}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"sprite","header":"sprite(key: string, layerName: string): Sprite","description":"Adds a sprite to the current scene","returnDescription":"A new Sprite","type":"Sprite","params":[{"name":"key","description":"The key of the image the sprite will represent","type":"string"},{"name":"layerName","description":"The layer on which to add the sprite","type":"string"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"animatedSprite","header":"animatedSprite(key: string, layerName: string): AnimatedSprite","description":"Adds an AnimatedSprite to the current scene","returnDescription":"A new AnimatedSprite","type":"AnimatedSprite","params":[{"name":"key","description":"The key of the image the sprite will represent","type":"string"},{"name":"layerName","description":"The layer on which to add the sprite","type":"string"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"graphic","header":"graphic(type: GraphicType | string, layerName: string, options?: Record<string, any>): Graphic","description":"Adds a new graphic element to the current Scene","returnDescription":"A new Graphic","type":"Graphic","params":[{"name":"type","description":"The type of graphic to add","type":"GraphicType | string"},{"name":"layerName","description":"The layer on which to add the graphic","type":"string"},{"name":"options","description":"Any additional arguments to send to the graphic constructor","type":""}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"tilemap","header":"tilemap(key: string, scale?: Vec2): Array<Layer>","description":"Adds a tilemap to the scene","returnDescription":"An array of Layers, each of which contains a layer of the tilemap as its own Tilemap instance.","type":"Array<Layer>","params":[{"name":"key","description":"The key of the loaded tilemap to load","type":"string"},{"name":"constr","description":"The constructor of the desired tilemap","type":""},{"name":"args","description":"Additional arguments to send to the tilemap constructor","type":""}]}],"members":[],"name":"FactoryManager","description":"The manager of all factories used for adding @reference[GameNode]s to the @reference[Scene].","abstract":false},"name":"FactoryManager","type":"file"}],"name":"Factories","type":"folder"},{"data":{"implements":[],"parent":null,"functions":[{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getName","header":"getName(): string","description":"Retreives the name of the layer","returnDescription":"The name of the layer","type":"string","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"setPaused","header":"setPaused(pauseValue: boolean): void","description":"Pauses\/Unpauses the layer. Affects all elements in this layer","returnDescription":null,"type":"void","params":[{"name":"pauseValue","description":"True if the layer should be paused, false if not","type":"boolean"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"isPaused","header":"isPaused(): boolean","description":"Returns whether or not the layer is paused","returnDescription":null,"type":"boolean","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"setAlpha","header":"setAlpha(alpha: number): void","description":"Sets the opacity of the layer","returnDescription":null,"type":"void","params":[{"name":"alpha","description":"The new opacity value in the range [0, 1]","type":"number"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getAlpha","header":"getAlpha(): number","description":"Gets the opacity of the layer","returnDescription":"The opacity","type":"number","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"setHidden","header":"setHidden(hidden: boolean): void","description":"Sets the layer's hidden value. If hidden, a layer will not be rendered, but will still update","returnDescription":null,"type":"void","params":[{"name":"hidden","description":"The hidden value of the layer","type":"boolean"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"isHidden","header":"isHidden(): boolean","description":"Returns the hideen value of the lyaer","returnDescription":"True if the scene is hidden, false otherwise","type":"boolean","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"disable","header":"disable(): void","description":"Pauses this scene and hides it ","returnDescription":null,"type":"void","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"enable","header":"enable(): void","description":"Unpauses this layer and makes it visible ","returnDescription":null,"type":"void","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"setYSort","header":"setYSort(ySort: boolean): void","description":"Sets whether or not the scene will ySort automatically.ySorting means that CanvasNodes on this layer will have their depth sorted depending on their y-value.This means that if an object is \"higher\" in the scene, it will sort behind objects that are \"lower\".This is useful for 3\/4 view games, or similar situations, where you sometimes want to be in front of objects,and other times want to be behind the same objects.","returnDescription":null,"type":"void","params":[{"name":"ySort","description":"True if ySorting should be active, false if not","type":"boolean"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getYSort","header":"getYSort(): boolean","description":"Gets the ySort status of the scene","returnDescription":"True if ySorting is occurring, false otherwise","type":"boolean","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"setDepth","header":"setDepth(depth: number): void","description":"Sets the depth of the layer compared to other layers. A larger number means the layer will be closer to the screen.","returnDescription":null,"type":"void","params":[{"name":"depth","description":"The depth of the layer.","type":"number"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getDepth","header":"getDepth(): number","description":"Retrieves the depth of the layer.","returnDescription":"The depth","type":"number","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"addNode","header":"addNode(node: GameNode): void","description":"Adds a node to this layer","returnDescription":null,"type":"void","params":[{"name":"node","description":"The node to add to this layer.","type":"GameNode"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getItems","header":"getItems(): Array<GameNode>","description":"Retreives all GameNodes from this layer","returnDescription":"an Array that contains all of the GameNodes in this layer.","type":"Array<GameNode>","params":[]}],"members":[{"annotation":"The scene this layer belongs to ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"scene","type":"Scene"},{"annotation":"The name of this layer ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"name","type":"string"},{"annotation":"Whether this layer is paused or not ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"paused","type":"boolean"},{"annotation":"Whether this layer is hidden from being rendered or not ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"hidden","type":"boolean"},{"annotation":"The global alpha level of this layer ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"alpha","type":"number"},{"annotation":"An array of the GameNodes that belong to this layer ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"items","type":"Array<GameNode>"},{"annotation":"Whether or not this layer should be ysorted ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"ySort","type":"boolean"},{"annotation":"The depth of this layer compared to other layers ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"depth","type":"number"}],"name":"Layer","constructor":{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"constructor","header":"constructor(scene: Scene, name: string)","description":"Creates a new layer. To do this in a game, use the addLayer() method in @refrence[Scene]","returnDescription":null,"type":"any","params":[{"name":"scene","description":"The scene to add the layer to","type":"Scene"},{"name":"name","description":"The name of the layer","type":"string"}]},"description":"A layer in the scene. Layers are used for sorting @reference[GameNode]s by depth.","abstract":false},"name":"Layer","type":"file"},{"data":[{"data":{"implements":[],"parent":"Layer","functions":[],"members":[{"annotation":"The value of the parallax of the Layer ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"parallax","type":"Vec2"}],"name":"ParallaxLayer","constructor":{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"constructor","header":"constructor(scene: Scene, name: string, parallax: Vec2)","description":"Creates a new ParallaxLayer.Use addParallaxLayer() in @reference[Scene] to add a layer of this type to your game.","returnDescription":null,"type":"any","params":[{"name":"scene","description":"The Scene to add this ParallaxLayer to","type":"Scene"},{"name":"name","description":"The name of the ParallaxLayer","type":"string"},{"name":"parallax","description":"The parallax level","type":"Vec2"}]},"description":"An extension of a Layer that has a parallax value.","abstract":false},"name":"ParallaxLayer","type":"file"},{"data":{"implements":[],"parent":"ParallaxLayer","functions":[],"members":[],"name":"UILayer","constructor":{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"constructor","header":"constructor(scene: Scene, name: string)","description":"Creates a new UILayer.Use addUILayer() in @reference[Scene] to add a layer of this type to your game.","returnDescription":null,"type":"any","params":[{"name":"scene","description":"The Scene to add this UILayer to","type":"Scene"},{"name":"name","description":"The name of the UILayer","type":"string"}]},"description":"A Layer strictly to be used for managing UIElements.This is intended to be a Layer that always stays in the same place,and thus renders things like a HUD or an inventory without taking into consideration the \\reference[Viewport] scroll.","abstract":false},"name":"UILayer","type":"file"}],"name":"Layers","type":"folder"},{"data":{"implements":["Updateable"],"parent":null,"functions":[{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"loadScene","header":"loadScene(): void","description":"A lifecycle method that gets called when a new scene is created. Load all files you wish to access in the scene here. ","returnDescription":null,"type":"void","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"unloadScene","header":"unloadScene(): void","description":"A lifecycle method that gets called on scene destruction. Specify which files you no longer need for garbage collection. ","returnDescription":null,"type":"void","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"startScene","header":"startScene(): void","description":"A lifecycle method called strictly after loadScene(). Create any game objects you wish to use in the scene here. ","returnDescription":null,"type":"void","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"updateScene","header":"updateScene(deltaT: number): void","description":"A lifecycle method called every frame of the game. This is where you can dynamically do things like add in new enemies","returnDescription":null,"type":"void","params":[{"name":"delta","description":"The time this frame represents","type":""}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"render","header":"render(): void","description":"Collects renderable sets and coordinates with the RenderingManager to draw the Scene","returnDescription":null,"type":"void","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"setRunning","header":"setRunning(running: boolean): void","description":"Sets the scene as running or not","returnDescription":null,"type":"void","params":[{"name":"running","description":"True if the Scene should be running, false if not","type":"boolean"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"isRunning","header":"isRunning(): boolean","description":"Returns whether or not the Scene is running","returnDescription":"True if the scene is running, false otherwise","type":"boolean","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"addLayer","header":"addLayer(name: string, depth?: number): Layer","description":"Adds a new layer to the scene and returns it","returnDescription":"The newly created Layer","type":"Layer","params":[{"name":"name","description":"The name of the new layer","type":"string"},{"name":"depth","description":"The depth of the layer","type":""}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"addParallaxLayer","header":"addParallaxLayer(name: string, parallax: Vec2, depth?: number): ParallaxLayer","description":"Adds a new parallax layer to this scene and returns it","returnDescription":"The newly created ParallaxLayer","type":"ParallaxLayer","params":[{"name":"name","description":"The name of the parallax layer","type":"string"},{"name":"parallax","description":"The parallax level","type":"Vec2"},{"name":"depth","description":"The depth of the layer","type":""}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"addUILayer","header":"addUILayer(name: string): UILayer","description":"Adds a new UILayer to the scene","returnDescription":"The newly created UILayer","type":"UILayer","params":[{"name":"name","description":"The name of the new UIlayer","type":"string"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getLayer","header":"getLayer(name: string): Layer","description":"Gets a layer from the scene by name if it exists.This can be a Layer or any of its subclasses","returnDescription":"The Layer found with that name","type":"Layer","params":[{"name":"name","description":"The name of the layer","type":"string"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"isParallaxLayer","header":"isParallaxLayer(name: string): boolean","description":"Returns true if this layer is a ParallaxLayer","returnDescription":"True if this layer is a ParallaxLayer","type":"boolean","params":[{"name":"name","description":"The name of the layer","type":"string"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"isUILayer","header":"isUILayer(name: string): boolean","description":"Returns true if this layer is a UILayer","returnDescription":"True if this layer is ParallaxLayer","type":"boolean","params":[{"name":"name","description":"The name of the layer","type":"string"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getViewTranslation","header":"getViewTranslation(node: GameNode): Vec2","description":"Returns the translation of this node with respect to camera space (due to the viewport moving).This value is affected by the parallax level of the @reference[Layer] the node is on.","returnDescription":"A Vec2 containing the translation of viewport with respect to this node.","type":"Vec2","params":[{"name":"node","description":"The node to check the viewport with respect to","type":"GameNode"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getViewScale","header":"getViewScale(): number","description":"Returns the scale level of the view","returnDescription":"The zoom level of the viewport","type":"number","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getViewport","header":"getViewport(): Viewport","description":"Returns the Viewport associated with this scene","returnDescription":"The current Viewport","type":"Viewport","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getWorldSize","header":"getWorldSize(): Vec2","description":"Gets the world size of this Scene","returnDescription":"The world size in a Vec2","type":"Vec2","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getSceneGraph","header":"getSceneGraph(): SceneGraph","description":"Gets the SceneGraph associated with this Scene","returnDescription":"The SceneGraph","type":"SceneGraph","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getPhysicsManager","header":"getPhysicsManager(): PhysicsManager","description":"Gets the PhysicsManager associated with this Scene","returnDescription":"The PhysicsManager","type":"PhysicsManager","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getNavigationManager","header":"getNavigationManager(): NavigationManager","description":"Gets the NavigationManager associated with this Scene","returnDescription":"The NavigationManager","type":"NavigationManager","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getAIManager","header":"getAIManager(): AIManager","description":"Gets the AIManager associated with this Scene","returnDescription":"The AIManager","type":"AIManager","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"generateId","header":"generateId(): number","description":"Generates an ID for a GameNode","returnDescription":"The new ID","type":"number","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getTilemap","header":"getTilemap(name: string): Tilemap","description":"Retrieves a Tilemap in this Scene","returnDescription":"The Tilemap, if one this name exists, otherwise null","type":"Tilemap","params":[{"name":"name","description":"The name of the Tilemap","type":"string"}]}],"members":[{"annotation":"The size of the game world. ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"worldSize","type":"Vec2"},{"annotation":"The viewport. ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"viewport","type":"Viewport"},{"annotation":"A flag that represents whether this scene is running or not. ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"running","type":"boolean"},{"annotation":"The manager of this scene. ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"sceneManager","type":"SceneManager"},{"annotation":"The receiver for this scene. ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"receiver","type":"Receiver"},{"annotation":"The emitter for this scene. ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"emitter","type":"Emitter"},{"annotation":"This list of tilemaps in this scene. ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"tilemaps","type":"Array<Tilemap>"},{"annotation":"A map from layer names to the layers themselves ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"layers","type":"Map<Layer>"},{"annotation":"A map from parallax layer names to the parallax layers themselves ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"parallaxLayers","type":"Map<ParallaxLayer>"},{"annotation":"A map from uiLayer names to the uiLayers themselves ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"uiLayers","type":"Map<UILayer>"},{"annotation":"The scene graph of the Scene","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"sceneGraph","type":"SceneGraph"},{"annotation":"The physics manager of the Scene ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"physicsManager","type":"PhysicsManager"},{"annotation":"The navigation manager of the Scene ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"navManager","type":"NavigationManager"},{"annotation":"The AI manager of the Scene ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"aiManager","type":"AIManager"},{"annotation":"The renderingManager of the scene ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"renderingManager","type":"RenderingManager"},{"annotation":"An interface that allows the adding of different nodes to the scene ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"add","type":"FactoryManager"},{"annotation":"An interface that allows the loading of different files for use in the scene ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"load","type":"ResourceManager"},{"annotation":"The configuration options for this scene ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"sceneOptions","type":"SceneOptions"}],"name":"Scene","constructor":{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"constructor","header":"constructor(viewport: Viewport, sceneManager: SceneManager, renderingManager: RenderingManager, options: Record<string, any>)","description":"Creates a new Scene. To add a new Scene in your game, use addScene() in @reference[SceneManager]","returnDescription":null,"type":"any","params":[{"name":"viewport","description":"The viewport of the game","type":"Viewport"},{"name":"sceneManager","description":"The SceneManager that owns this Scene","type":"SceneManager"},{"name":"renderingManager","description":"The RenderingManager that will handle this Scene's rendering","type":"RenderingManager"},{"name":"game","description":"The instance of the Game","type":""},{"name":"options","description":"The options for Scene initialization","type":"Record<string, any>"}]},"description":"Scenes are the main container in the game engine.Your main scene is the current level or menu of the game, and will contain all of the GameNodes needed.Scenes provide an easy way to load assets, add assets to the game world, and unload assets,and have lifecycle methods exposed for these functions.","abstract":false},"name":"Scene","type":"file"},{"data":{"implements":[],"parent":null,"functions":[{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"addScene<T extends Scene>","header":"addScene<T extends Scene>(constr: new (...args: any) => T, options: Record<string, any>): void","description":"Add a scene as the main scene.Use this method if you've created a subclass of Scene, and you want to add it as the main Scene.","returnDescription":null,"type":"void","params":[{"name":"constr","description":"The constructor of the scene to add","type":"new (...args: any) => T"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"changeScene<T extends Scene>","header":"changeScene<T extends Scene>(constr: new (...args: any) => T, options: Record<string, any>): void","description":"Change from the current scene to this new scene.Use this method if you've created a subclass of Scene, and you want to add it as the main Scene.","returnDescription":null,"type":"void","params":[{"name":"constr","description":"The constructor of the scene to change to","type":"new (...args: any) => T"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"generateId","header":"generateId(): number","description":"Generates a unique ID","returnDescription":"A new ID","type":"number","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"render","header":"render(): void","description":"Renders the current Scene","returnDescription":null,"type":"void","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"update","header":"update(deltaT: number)","description":"Updates the current Scene","returnDescription":null,"type":"any","params":[{"name":"deltaT","description":"The timestep of the Scene","type":"number"}]}],"members":[{"annotation":"The current Scene of the game ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"currentScene","type":"Scene"},{"annotation":"The Viewport of the game ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"viewport","type":"Viewport"},{"annotation":"A reference to the ResourceManager ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"resourceManager","type":"ResourceManager"},{"annotation":"A counter to keep track of game ids ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"idCounter","type":"number"},{"annotation":"The RenderingManager of the game ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"renderingManager","type":"RenderingManager"}],"name":"SceneManager","constructor":{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"constructor","header":"constructor(viewport: Viewport, renderingManager: RenderingManager)","description":"Creates a new SceneManager","returnDescription":null,"type":"any","params":[{"name":"viewport","description":"The Viewport of the game","type":"Viewport"},{"name":"game","description":"The Game instance","type":""},{"name":"renderingManager","description":"The RenderingManager of the game","type":"RenderingManager"}]},"description":"The SceneManager acts as an interface to create Scenes, and handles the lifecycle methods of Scenes.It gives Scenes access to information they need from the @reference[Game] class while keeping a layer of separation.","abstract":false},"name":"SceneManager","type":"file"}],"name":"Scene","type":"folder"},{"data":[{"data":{"implements":[],"parent":null,"functions":[{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"addNode","header":"addNode(node: CanvasNode): number","description":"Add a node to the SceneGraph","returnDescription":"The SceneGraph ID of this newly added CanvasNode","type":"number","params":[{"name":"node","description":"The CanvasNode to add to the SceneGraph","type":"CanvasNode"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"abstract addNodeSpecific","header":"abstract addNodeSpecific(node: CanvasNode, id: string): void","description":"An overridable method to add a CanvasNode to the specific data structure of the SceneGraph","returnDescription":null,"type":"void","params":[{"name":"node","description":"The node to add to the data structure","type":"CanvasNode"},{"name":"id","description":"The id of the CanvasNode","type":"string"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"removeNode","header":"removeNode(node: CanvasNode): void","description":"Removes a node from the SceneGraph","returnDescription":null,"type":"void","params":[{"name":"node","description":"The node to remove","type":"CanvasNode"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"abstract removeNodeSpecific","header":"abstract removeNodeSpecific(node: CanvasNode, id: string): void","description":"The specific implementation of removing a node","returnDescription":null,"type":"void","params":[{"name":"node","description":"The node to remove","type":"CanvasNode"},{"name":"id","description":"The id of the node to remove","type":"string"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getNode","header":"getNode(id: string): CanvasNode","description":"Get a specific node using its id","returnDescription":"The node with this ID","type":"CanvasNode","params":[{"name":"id","description":"The id of the CanvasNode to retrieve","type":"string"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getNodesAt","header":"getNodesAt(vecOrX: Vec2 | number, y: number = null): Array<CanvasNode>","description":"Returns the nodes at specific coordinates","returnDescription":"An array of nodes found at the position provided","type":"Array<CanvasNode>","params":[{"name":"vecOrX","description":"The x-coordinate of the position, or the coordinates in a Vec2","type":"Vec2 | number"},{"name":"y","description":"The y-coordinate of the position","type":"number = null"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"abstract getNodesInRegion","header":"abstract getNodesInRegion(boundary: AABB): Array<CanvasNode>","description":"Returns the nodes that overlap a specific boundary","returnDescription":"An array of nodes found overlapping the provided boundary","type":"Array<CanvasNode>","params":[{"name":"boundary","description":"The region to check","type":"AABB"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getAllNodes","header":"getAllNodes(): Array<CanvasNode>","description":"Returns all nodes in the SceneGraph","returnDescription":"An Array containing all nodes in the SceneGraph","type":"Array<CanvasNode>","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"abstract getNodesAtCoords","header":"abstract getNodesAtCoords(x: number, y: number): Array<CanvasNode>","description":"The specific implementation of getting a node at certain coordinates","returnDescription":null,"type":"Array<CanvasNode>","params":[{"name":"x","description":"The x-coordinates of the node","type":"number"},{"name":"y","description":"The y-coordinates of the node","type":"number"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"abstract getVisibleSet","header":"abstract getVisibleSet(): Array<CanvasNode>","description":"Gets the visible set of CanvasNodes based on the @reference[Viewport]","returnDescription":"An array containing all visible nodes in the SceneGraph","type":"Array<CanvasNode>","params":[]}],"members":[{"annotation":"A reference to the viewport ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"viewport","type":"Viewport"},{"annotation":"A map of CanvasNodes in this SceneGraph ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"nodeMap","type":"Map<CanvasNode>"},{"annotation":"A counter of IDs for nodes in this SceneGraph ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"idCounter","type":"number"},{"annotation":"A reference to the Scene this SceneGraph belongs to ","access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"scene","type":"Scene"}],"name":"SceneGraph","constructor":{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"constructor","header":"constructor(viewport: Viewport, scene: Scene)","description":"Creates a new SceneGraph","returnDescription":null,"type":"any","params":[{"name":"viewport","description":"The viewport","type":"Viewport"},{"name":"scene","description":"The Scene this SceneGraph belongs to","type":"Scene"}]},"description":"An abstract interface of a SceneGraph.Exposes methods for use by other code, but leaves the implementation up to the subclasses.The SceneGraph manages the positions of all GameNodes, and can easily prune a visible set for rendering.","abstract":true},"name":"SceneGraph","type":"file"},{"data":{"implements":[],"parent":"SceneGraph","functions":[],"members":[{"annotation":"The list of CanvasNodes in this SceneGraph ","access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"nodeList","type":"Array<CanvasNode>"}],"name":"SceneGraphArray","constructor":{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"constructor","header":"constructor(viewport: Viewport, scene: Scene)","description":"Creates a new SceneGraphArray","returnDescription":null,"type":"any","params":[{"name":"viewport","description":"The Viewport","type":"Viewport"},{"name":"scene","description":"The Scene this SceneGraph belongs to","type":"Scene"}]},"description":"An implementation of a SceneGraph that simply stored CanvasNodes in an array.","abstract":false},"name":"SceneGraphArray","type":"file"},{"data":{"implements":[],"parent":"SceneGraph","functions":[],"members":[{"annotation":"The QuadTree used to store the CanvasNodes ","access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"qt","type":"RegionQuadTree<CanvasNode>"},{"annotation":"A list of nodes to help out the QuadTree ","access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"nodes","type":"Array<CanvasNode>"}],"name":"SceneGraphQuadTree","constructor":{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"constructor","header":"constructor(viewport: Viewport, scene: Scene)","description":"Creates a new SceneGraphQuadTree","returnDescription":null,"type":"any","params":[{"name":"viewport","description":"The Viewport","type":"Viewport"},{"name":"scene","description":"The Scene this SceneGraph belongs to","type":"Scene"}]},"description":"An implementation of a SceneGraph that uses a @reference[RegionQuadTree] to store @reference[CanvasNode]s.","abstract":false},"name":"SceneGraphQuadTree","type":"file"},{"data":{"implements":[],"parent":null,"functions":[{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"enableZoom","header":"enableZoom(): void","description":"Enables the viewport to zoom in and out ","returnDescription":null,"type":"void","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getCenter","header":"getCenter(): Vec2","description":"Returns the position of the viewport","returnDescription":"The center of the viewport as a Vec2","type":"Vec2","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getOrigin","header":"getOrigin(): Vec2","description":"Returns a new Vec2 with the origin of the viewport","returnDescription":"The top left cornder of the Vieport as a Vec2","type":"Vec2","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getView","header":"getView(): AABB","description":"Returns the region visible to this viewport","returnDescription":"The AABB containing the region visible to the viewport","type":"AABB","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"setCenter","header":"setCenter(vecOrX: Vec2 | number, y: number = null): void","description":"Set the position of the viewport","returnDescription":null,"type":"void","params":[{"name":"vecOrX","description":"The new position or the x-coordinate of the new position","type":"Vec2 | number"},{"name":"y","description":"The y-coordinate of the new position","type":"number = null"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getHalfSize","header":"getHalfSize(): Vec2","description":"Returns the size of the viewport as a Vec2","returnDescription":"The half-size of the viewport as a Vec2","type":"Vec2","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"setSize","header":"setSize(vecOrX: Vec2 | number, y: number = null): void","description":"Sets the size of the viewport","returnDescription":null,"type":"void","params":[{"name":"vecOrX","description":"The new width of the viewport or the new size as a Vec2","type":"Vec2 | number"},{"name":"y","description":"The new height of the viewport","type":"number = null"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"setHalfSize","header":"setHalfSize(vecOrX: Vec2 | number, y: number = null): void","description":"Sets the half-size of the viewport","returnDescription":null,"type":"void","params":[{"name":"vecOrX","description":"The new half-width of the viewport or the new half-size as a Vec2","type":"Vec2 | number"},{"name":"y","description":"The new height of the viewport","type":"number = null"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"setCanvasSize","header":"setCanvasSize(vecOrX: Vec2 | number, y: number = null): void","description":"Updates the viewport with the size of the current Canvas","returnDescription":null,"type":"void","params":[{"name":"vecOrX","description":"The width of the canvas, or the canvas size as a Vec2","type":"Vec2 | number"},{"name":"y","description":"The height of the canvas","type":"number = null"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"setZoomLevel","header":"setZoomLevel(zoom: number): void","description":"Sets the zoom level of the viewport","returnDescription":null,"type":"void","params":[{"name":"zoom","description":"The zoom level","type":"number"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getZoomLevel","header":"getZoomLevel(): number","description":"Gets the zoom level of the viewport","returnDescription":"The zoom level","type":"number","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"setSmoothingFactor","header":"setSmoothingFactor(smoothingFactor: number): void","description":"Sets the smoothing factor for the viewport movement.","returnDescription":null,"type":"void","params":[{"name":"smoothingFactor","description":"The smoothing factor for the viewport","type":"number"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"setFocus","header":"setFocus(focus: Vec2): void","description":"Tells the viewport to focus on a point. Overidden by \"following\".","returnDescription":null,"type":"void","params":[{"name":"focus","description":"The point the  viewport should focus on","type":"Vec2"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"includes","header":"includes(node: CanvasNode): boolean","description":"Returns true if the CanvasNode is inside of the viewport","returnDescription":"True if the node is currently visible in the viewport, false if not","type":"boolean","params":[{"name":"node","description":"The node to check","type":"CanvasNode"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"setBounds","header":"setBounds(lowerX: number, lowerY: number, upperX: number, upperY: number): void","description":"Sets the bounds of the viewport","returnDescription":null,"type":"void","params":[{"name":"lowerX","description":"The left edge of the viewport","type":"number"},{"name":"lowerY","description":"The top edge of the viewport","type":"number"},{"name":"upperX","description":"The right edge of the viewport","type":"number"},{"name":"upperY","description":"The bottom edge of the viewport","type":"number"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"follow","header":"follow(node: GameNode): void","description":"Make the viewport follow the specified GameNode","returnDescription":null,"type":"void","params":[{"name":"node","description":"The GameNode to follow","type":"GameNode"}]}],"members":[{"annotation":"The AABB that contains the position and size of the viewport view ","access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"view","type":"AABB"},{"annotation":"The boundary for the viewport. This represents the limits to where the viewport can go ","access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"boundary","type":"AABB"},{"annotation":"The GameNode the Viewport is following ","access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"following","type":"GameNode"},{"annotation":"The position the GameNode is focusing on. This is overridden if \"following\" is set. ","access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"focus","type":"Vec2"},{"annotation":"A queue of previous positions of what this viewport is following. Used for smoothing viewport movement ","access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"lastPositions","type":"Queue<Vec2>"},{"annotation":"The number of previous positions this viewport tracks ","access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"smoothingFactor","type":"number"},{"annotation":"A boolean tha represents whether the player can zoom by scrolling with the mouse wheel ","access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"scrollZoomEnabled","type":"boolean"},{"annotation":"The amount that is zoomed in or out. ","access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"ZOOM_FACTOR","type":"number"},{"annotation":"The size of the canvas ","access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"canvasSize","type":"Vec2"}],"name":"Viewport","description":"The viewport of the game. Corresponds to the visible window displayed in the browser.The viewport keeps track of its position in the game world, and can act as a camera to follow objects.","abstract":false},"name":"Viewport","type":"file"}],"name":"SceneGraph","type":"folder"},{"data":[{"data":{"implements":[],"parent":null,"functions":[{"access":{"isGetter":false,"isStatic":true,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getInstance","header":"getInstance(): AudioManager","description":"Get the instance of the AudioManager class or create a new one if none exists","returnDescription":"The AudioManager","type":"AudioManager","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"initAudio","header":"initAudio(): void","description":"Initializes the webAudio context","returnDescription":null,"type":"void","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getAudioContext","header":"getAudioContext(): AudioContext","description":"Returns the current audio context","returnDescription":"The AudioContext","type":"AudioContext","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"createSound","header":"createSound(key: string): AudioBufferSourceNode","description":"Creates a new sound from the key of a loaded audio file","returnDescription":"The newly created AudioBuffer","type":"AudioBufferSourceNode","params":[{"name":"key","description":"The key of the loaded audio file to create a new sound for","type":"string"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"playSound","header":"playSound(key: string, loop: boolean, holdReference: boolean): void","description":"Play the sound specified by the key","returnDescription":null,"type":"void","params":[{"name":"key","description":"The key of the sound to play","type":"string"},{"name":"loop","description":"A boolean for whether or not to loop the sound","type":"boolean"},{"name":"holdReference","description":"A boolean for whether or not we want to hold on to a reference of the audio node. This is good for playing music on a loop that will eventually need to be stopped.","type":"boolean"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"protected","readonly":false,"isSetter":false},"name":"stopSound","header":"stopSound(key: string): void","description":"Stop the sound specified by the key","returnDescription":null,"type":"void","params":[]}],"members":[{"annotation":"The event receiver of this AudioManager ","access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"receiver","type":"Receiver"},{"annotation":"A Map of the names of currently playing (or paused) sounds to their AudioBuffers ","access":{"isGetter":false,"isStatic":false,"accessLevel":"private","readonly":false,"isSetter":false},"name":"currentSounds","type":"Map<AudioBufferSourceNode>"}],"name":"AudioManager","description":"Manages any sounds or music needed for the game.Through the EventQueue, exposes interface to play sounds so GameNodes can activate sounds withoutneeding direct references to the audio system","abstract":false},"name":"AudioManager","type":"file"}],"name":"Sound","type":"folder"},{"data":[{"data":{"implements":[],"parent":null,"functions":[{"access":{"isGetter":false,"isStatic":true,"accessLevel":"public","readonly":false,"isSetter":false},"name":"ones2d","header":"ones2d(dim1: number, dim2: number): number[][]","description":"Returns a 2d array of dim1 x dim2 filled with 1s","returnDescription":"A dim1 x dim2 Array filled with 1s","type":"number[][]","params":[{"name":"dim1","description":"The first dimension of the array to create","type":"number"},{"name":"dim2","description":"The second dimension of the array to create","type":"number"}]},{"access":{"isGetter":false,"isStatic":true,"accessLevel":"public","readonly":false,"isSetter":false},"name":"bool2d","header":"bool2d(dim1: number, dim2: number, flag: boolean): boolean[][]","description":"Returns a 2d array of dim1 x dim2 filled with true or false","returnDescription":"A dim1 x dim2 Array filled with flag","type":"boolean[][]","params":[{"name":"dim1","description":"The first dimension of the array to create","type":"number"},{"name":"dim2","description":"The second dimension of the array to create","type":"number"},{"name":"flag","description":"The boolean to fill the array with","type":"boolean"}]}],"members":[],"name":"ArrayUtils","description":"A class containing some utility functions for Arrays ","abstract":false},"name":"ArrayUtils","type":"file"},{"data":{"implements":[],"parent":null,"functions":[{"access":{"isGetter":false,"isStatic":true,"accessLevel":"public","readonly":false,"isSetter":false},"name":"get TRANSPARENT","header":"get TRANSPARENT(): Color","description":"Transparent color","returnDescription":"rgba(0, 0, 0, 0)","type":"Color","params":[]},{"access":{"isGetter":false,"isStatic":true,"accessLevel":"public","readonly":false,"isSetter":false},"name":"get RED","header":"get RED(): Color","description":"Red color","returnDescription":"rgb(255, 0, 0)","type":"Color","params":[]},{"access":{"isGetter":false,"isStatic":true,"accessLevel":"public","readonly":false,"isSetter":false},"name":"get GREEN","header":"get GREEN(): Color","description":"Green color","returnDescription":"rgb(0, 255, 0)","type":"Color","params":[]},{"access":{"isGetter":false,"isStatic":true,"accessLevel":"public","readonly":false,"isSetter":false},"name":"get BLUE","header":"get BLUE(): Color","description":"Blue color","returnDescription":"rgb(0, 0, 255)","type":"Color","params":[]},{"access":{"isGetter":false,"isStatic":true,"accessLevel":"public","readonly":false,"isSetter":false},"name":"get YELLOW","header":"get YELLOW(): Color","description":"Yellow color","returnDescription":"rgb(255, 255, 0)","type":"Color","params":[]},{"access":{"isGetter":false,"isStatic":true,"accessLevel":"public","readonly":false,"isSetter":false},"name":"get PURPLE","header":"get PURPLE(): Color","description":"Purple color","returnDescription":"rgb(255, 0, 255)","type":"Color","params":[]},{"access":{"isGetter":false,"isStatic":true,"accessLevel":"public","readonly":false,"isSetter":false},"name":"get CYAN","header":"get CYAN(): Color","description":"Cyan color","returnDescription":"rgb(0, 255, 255)","type":"Color","params":[]},{"access":{"isGetter":false,"isStatic":true,"accessLevel":"public","readonly":false,"isSetter":false},"name":"get WHITE","header":"get WHITE(): Color","description":"White color","returnDescription":"rgb(255, 255, 255)","type":"Color","params":[]},{"access":{"isGetter":false,"isStatic":true,"accessLevel":"public","readonly":false,"isSetter":false},"name":"get BLACK","header":"get BLACK(): Color","description":"Black color","returnDescription":"rgb(0, 0, 0)","type":"Color","params":[]},{"access":{"isGetter":false,"isStatic":true,"accessLevel":"public","readonly":false,"isSetter":false},"name":"get ORANGE","header":"get ORANGE(): Color","description":"Orange color","returnDescription":"rgb(255, 100, 0)","type":"Color","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"set","header":"set(r: number, g: number, b: number, a: number = 1): void","description":"Sets the color to the values provided","returnDescription":null,"type":"void","params":[{"name":"r","description":"Red","type":"number"},{"name":"g","description":"Green","type":"number"},{"name":"b","description":"Blue","type":"number"},{"name":"a","description":"Alpha","type":"number = 1"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"lighten","header":"lighten(): Color","description":"Returns a new color slightly lighter than the current color","returnDescription":"A new lighter Color","type":"Color","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"darken","header":"darken(): Color","description":"Returns a new color slightly darker than the current color","returnDescription":"A new darker Color","type":"Color","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"toString","header":"toString(): string","description":"Returns the color as a string of the form #RRGGBB","returnDescription":"#RRGGBB","type":"string","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"toStringRGB","header":"toStringRGB(): string","description":"Returns the color as a string of the form rgb(r, g, b)","returnDescription":"rgb(r, g, b)","type":"string","params":[]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"toStringRGBA","header":"toStringRGBA(): string","description":"Returns the color as a string of the form rgba(r, g, b, a)","returnDescription":"rgba(r, g, b, a)","type":"string","params":[]}],"members":[{"annotation":"The red value ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"r","type":"number"},{"annotation":"The green value ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"g","type":"number"},{"annotation":"The blue value ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"b","type":"number"},{"annotation":"The alpha value ","access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"a","type":"number"}],"name":"Color","constructor":{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"constructor","header":"constructor(r: number = 0, g: number = 0, b: number = 0, a: number = 1)","description":"Creates a new color","returnDescription":null,"type":"any","params":[{"name":"r","description":"Red","type":"number = 0"},{"name":"g","description":"Green","type":"number = 0"},{"name":"b","description":"Blue","type":"number = 0"},{"name":"a","description":"Alpha","type":"number = 1"}]},"description":"A Color util class that keeps track of colors like a vector, but can be converted into a string format","abstract":false},"name":"Color","type":"file"},{"data":{"implements":[],"parent":null,"functions":[{"access":{"isGetter":false,"isStatic":true,"accessLevel":"public","readonly":false,"isSetter":false},"name":"djikstra","header":"djikstra(g: Graph, start: number): Array<number>","description":"An implementation of Djikstra's shortest path algorithm based on the one described in The Algorithm Design Manual.","returnDescription":"An array containing the parent of each node of the Graph in the shortest path.","type":"Array<number>","params":[{"name":"g","description":"The graph","type":"Graph"},{"name":"start","description":"The number to start the shortest path from","type":"number"}]}],"members":[],"name":"GraphUtils","description":"A class to provides some utility functions for graphs ","abstract":false},"name":"GraphUtils","type":"file"},{"data":{"implements":[],"parent":null,"functions":[{"access":{"isGetter":false,"isStatic":true,"accessLevel":"public","readonly":false,"isSetter":false},"name":"sign","header":"sign(x: number): number","description":"Returns the sign of the value provided","returnDescription":"-1 if the number is less than 0, 1 otherwise","type":"number","params":[{"name":"x","description":"The value to extract the sign from","type":"number"}]},{"access":{"isGetter":false,"isStatic":true,"accessLevel":"public","readonly":false,"isSetter":false},"name":"clamp","header":"clamp(x: number, min: number, max: number): number","description":"Clamps the value x to the range [min, max], rounding up or down if needed","returnDescription":"x, if it is between min and max, or min\/max if it exceeds their bounds","type":"number","params":[{"name":"x","description":"The value to be clamped","type":"number"},{"name":"min","description":"The min of the range","type":"number"},{"name":"max","description":"The max of the range","type":"number"}]},{"access":{"isGetter":false,"isStatic":true,"accessLevel":"public","readonly":false,"isSetter":false},"name":"clamp01","header":"clamp01(x: number): number","description":"Clamps the value x to the range between 0 and 1","returnDescription":"x, if it is between 0 and 1, or 0\/1 if it exceeds their bounds","type":"number","params":[{"name":"x","description":"The value to be clamped","type":"number"}]},{"access":{"isGetter":false,"isStatic":true,"accessLevel":"public","readonly":false,"isSetter":false},"name":"lerp","header":"lerp(a: number, b: number, t: number): number","description":"Linear Interpolation","returnDescription":"The value between a and b at time t","type":"number","params":[{"name":"a","description":"The first value for the interpolation bound","type":"number"},{"name":"b","description":"The second value for the interpolation bound","type":"number"},{"name":"t","description":"The time we are interpolating to","type":"number"}]},{"access":{"isGetter":false,"isStatic":true,"accessLevel":"public","readonly":false,"isSetter":false},"name":"invLerp","header":"invLerp(a: number, b: number, value: number)","description":"Inverse Linear Interpolation. Finds the time at which a value between a and b would occur","returnDescription":"The time at which the current value occurs between a and b","type":"any","params":[{"name":"a","description":"The first value for the interpolation bound","type":"number"},{"name":"b","description":"The second value for the interpolation bound","type":"number"},{"name":"value","description":"The current value","type":"number"}]},{"access":{"isGetter":false,"isStatic":true,"accessLevel":"public","readonly":false,"isSetter":false},"name":"floorToPlace","header":"floorToPlace(num: number, place: number): number","description":"Cuts off decimal points of a number after a specified place","returnDescription":"The floored number","type":"number","params":[{"name":"num","description":"The number to floor","type":"number"},{"name":"place","description":"The last decimal place of the new number","type":"number"}]},{"access":{"isGetter":false,"isStatic":true,"accessLevel":"public","readonly":false,"isSetter":false},"name":"toHex","header":"toHex(num: number, minLength: number = null): string","description":"Returns the number as a hexadecimal","returnDescription":"The hex representation of the number as a string","type":"string","params":[{"name":"num","description":"The number to convert to hex","type":"number"},{"name":"minLength","description":"The length of the returned hex string (adds zero padding if needed)","type":"number = null"}]},{"access":{"isGetter":false,"isStatic":true,"accessLevel":"public","readonly":false,"isSetter":false},"name":"toHexDigit","header":"toHexDigit(num: number): string","description":"Converts a digit to hexadecimal. In this case, a digit is between 0 and 15 inclusive","returnDescription":"The hex representation of the digit as a string","type":"string","params":[{"name":"num","description":"The digit to convert to hexadecimal","type":"number"}]}],"members":[],"name":"MathUtils","description":"A class containing some utility functions for math operations ","abstract":false},"name":"MathUtils","type":"file"},{"data":[{"data":{"implements":[],"parent":null,"functions":[{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"perlin","header":"perlin(x: number, y: number, z: number = 0): number","description":"Returns a random perlin noise value","returnDescription":"A noise value","type":"number","params":[{"name":"x","description":"An input value","type":"number"},{"name":"y","description":"An input value","type":"number"},{"name":"z","description":"An input value","type":"number = 0"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"inc","header":"inc(num: number)","description":"Safe increment that doesn't go beyond the repeat value","returnDescription":null,"type":"any","params":[{"name":"num","description":"The number to increment","type":"number"}]},{"access":{"isGetter":false,"isStatic":false,"accessLevel":"public","readonly":false,"isSetter":false},"name":"fade","header":"fade(t: number)","description":"The fade function 6t^5 - 15t^4 + 10t^3","returnDescription":null,"type":"any","params":[{"name":"t","description":"The value we are applying the fade to","type":"number"}]}],"members":[],"name":"Perlin","description":"A noise generator","abstract":false},"name":"Perlin","type":"file"}],"name":"Rand","type":"folder"},{"data":{"implements":[],"parent":null,"functions":[{"access":{"isGetter":false,"isStatic":true,"accessLevel":"public","readonly":false,"isSetter":false},"name":"randInt","header":"randInt(min: number, max: number): number","description":"Generates a random integer in the specified range","returnDescription":"A random int in the range [min, max)","type":"number","params":[{"name":"min","description":"The min of the range (inclusive)","type":"number"},{"name":"max","description":"The max of the range (exclusive)","type":"number"}]},{"access":{"isGetter":false,"isStatic":true,"accessLevel":"public","readonly":false,"isSetter":false},"name":"randHex","header":"randHex(min: number, max: number): string","description":"Generates a random hexadecimal number in the specified range","returnDescription":"a random hex number in the range [min, max) as a string","type":"string","params":[{"name":"min","description":"The min of the range (inclusive)","type":"number"},{"name":"max","description":"The max of the range (exclusive)","type":"number"}]},{"access":{"isGetter":false,"isStatic":true,"accessLevel":"public","readonly":false,"isSetter":false},"name":"randColor","header":"randColor(): Color","description":"Generates a random color","returnDescription":"A random Color","type":"Color","params":[]}],"members":[{"annotation":"A noise generator ","access":{"isGetter":false,"isStatic":true,"accessLevel":"public","readonly":false,"isSetter":false},"name":"noise","type":"Noise"}],"name":"RandUtils","description":"A class that has some random generator utils ","abstract":false},"name":"RandUtils","type":"file"},{"data":{"implements":[],"parent":null,"functions":[{"access":{"isGetter":false,"isStatic":true,"accessLevel":"public","readonly":false,"isSetter":false},"name":"insertionSort<T>","header":"insertionSort<T>(arr: Array<T>, comparator: (a: T, b: T) => number): void","description":"An implementation of insertion sort.In game engines, this is particularly useful to sort node positions because of temporal coherence -the idea that nodes are almost in the same place as last frame, and thus, in a frame-to-frame comparison,nodes essentially do not change position.This means we have a nearly sorted array of nodes if we keep track of this,so something like insertion sort actually becomes essentailly O(n),as it performs very well on nearly sorted arrays.","returnDescription":null,"type":"void","params":[{"name":"arr","description":"The array to sort in place","type":"Array<T>"},{"name":"comparator","description":"Compares element a and b in the array. Returns -1 if a < b, 0 if a = b, and 1 if a > b","type":"(a: T, b: T) => number"}]},{"access":{"isGetter":false,"isStatic":true,"accessLevel":"public","readonly":false,"isSetter":false},"name":"swap<T>","header":"swap<T>(arr: Array<T>, i: number, j: number): void","description":"Swaps two elements in the provided array","returnDescription":null,"type":"void","params":[{"name":"arr","description":"The array to perform the swap on in place","type":"Array<T>"},{"name":"i","description":"The first index","type":"number"},{"name":"j","description":"The second index","type":"number"}]}],"members":[],"name":"SortingUtils","description":"Some utility functions for sorting arrays ","abstract":false},"name":"SortingUtils","type":"file"},{"data":{"implements":[],"parent":null,"functions":[{"access":{"isGetter":false,"isStatic":true,"accessLevel":"public","readonly":false,"isSetter":false},"name":"getPathFromFilePath","header":"getPathFromFilePath(filePath: string): string","description":"Extracts the path from a filepath that includes the file","returnDescription":"The path portion of the filepath provided","type":"string","params":[{"name":"filePath","description":"the filepath to extract the path from","type":"string"}]}],"members":[],"name":"StringUtils","description":"Some utility functions for dealing with strings ","abstract":false},"name":"StringUtils","type":"file"}],"name":"Utils","type":"folder"}]